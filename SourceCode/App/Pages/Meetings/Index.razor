@page "/Meetings/Index"
@page "/Meetings/{countryid:int}/Index"

@inject IStringLocalizer<App> Localizer
@inject ITimeProvider TimeProvider
@inject IToastService ToastService

@inject MeetingService MeetingService
@inject GroupService GroupService

<PageHeading ObjectName="Meetings" IconClass="@FontAwesome.Meeting" PageAction="PageAction.List" />

@if (Principal.IsAuthenticated())
{
    <div class="col-12">
        <a class="btn btn-secondary btn-sm" href="Meetings/0/edit"><span class="@FontAwesome.Add" /> @Localizer["Add"]</a>
    </div>
}

<TableTemplate Items="Meetings">
    <TableHeader>
        <th>@Localizer["Meeting"]</th>
        <th>@Localizer["Country"]</th>
        <th>@Localizer["City"]</th>
        <th style ="text-align: center">@Localizer["StartDate"]</th>
        <th style="text-align: center">@Localizer["EndDate"]</th>
        <th style="text-align: center">@Localizer["Status"]</th>
        <th>@Localizer["Actions"]</th>
    </TableHeader>
    <RowTemplate Context="item">
        <td>@item.meeting.Name</td>
        <td>@item.meeting.OrganiserGroup.Country.EnglishName.AsLocalized()</td>
        <td>@item.meeting.CityName</td>
        <td align="center">@item.meeting.StartDate.ToString("d")</td>
        <td align="center">@item.meeting.EndDate.ToString("d")</td>
        <td class="@MeetingStatusCssClass(item.meeting)" align="center">@Localizer[item.meeting.Status(TimeProvider.LocalTime)]</td>
        <td>
            <AppButton Label="View" Href="@MeetingHref(item.meeting.Id, "view")"/>
            @if (item.MayEdit)
            {
                <AppButton Label="Edit" Href="@MeetingHref(item.meeting.Id, "edit")" />
            }
            @if (item.meeting.IsOpenForRegistration(TimeProvider.Now.DateTime))
            {
                <AppButton IconName="Register" Label="Register" Href="@MeetingHref(item.meeting.Id, "register")" IsDisabled />
            }
            @if (MayDelete(item.meeting))
            {
                <AppButton Label="Delete" Href="@MeetingHref(item.meeting.Id, "delete")" />
            }
        </td>
    </RowTemplate>
</TableTemplate>


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int CountryId { get; set; }
    ClaimsPrincipal? Principal;
    IEnumerable<(bool MayEdit, Meeting meeting)>? Meetings;

    bool MayDelete(Meeting meeting) =>
        Principal.IsAnyAdministrator() && meeting.Layouts.Sum(l => l.LayoutParticipants.Count()) == 0;

    string MeetingStatusCssClass(Meeting meeting) => $"meeting {meeting.StatusResourceName(TimeProvider.LocalTime).ToLowerInvariant()}";

    string MeetingHref(int id, string? function) =>
        string.IsNullOrWhiteSpace(function) ? $"meetings/{id}" : $"meetings/{id}/{function}";

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Meetings = await MeetingService.GetAllAsync(Principal, CountryId);
    }
}
