@page "/Meetings/{id:int}/Edit"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject ITimeProvider TimeProvider

@inject MeetingService MeetingService
@inject LayoutService LayoutService
@inject GroupService GroupService

<PageHeading Owner="Meeting" IconClass="@FontAwesome.Meeting" PageAction="@Id.ToAddOrEditPageAction()" HelpContext="Meeting" />

<EditTemplate Item="Meeting" ShowSaveButton="MayEdit" OnValidSubmit="OnValidSubmit">
    <Inputs>
        <AppInputSelect Width="4" @bind-Value="Meeting.OrganiserGroupId" Label="Organiser" Items="OrganiserItems" ShowPleaseSelect="true" />
        <AppInputText Width="3" Label="Venue" @bind-Value="Meeting.PlaceName" />
        <AppInputText Width="5" Label="Name" @bind-Value="Meeting.Name" />
        <AppInputDate Width="2" @bind-Value="Meeting.StartDate" Label="StartDate" IsDisabled="@DatesIsLocked(Meeting)" />
        <AppInputDate Width="2" @bind-Value="Meeting.EndDate" Label="EndDate" IsDisabled="@DatesIsLocked(Meeting)" />
        <AppInputSelect Width="2" @bind-Value="Meeting.Status" Label="Status" Items="EnumExtensions.MeetingStatusListboxItems()" />
        <AppInputCheck Width="2" @bind-Value="Meeting.IsFremo" Label="IsFremo" />
        <AppButton Label="Layouts" Href="@LayoutsHref(Id)" IconName="Layout" />
        <ActionMessage AlertType="Warning" Label="DO NOT describe what applies to individual track layouts below" />
        <AppInputMarkdown Label="Details" @bind-Value="@Meeting.Details" MaxNumberOfCharacters="MeetingValidator.MaxDetailsLength" />
        <AppInputMarkdown Label="Accomodation" @bind-Value="@Meeting.Accomodation" MaxNumberOfCharacters="MeetingValidator.MaxAccomodationLenght" />
    </Inputs>
    <Buttons>
    </Buttons>
</EditTemplate>
}


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    ClaimsPrincipal? Principal;
    Meeting Meeting = new Meeting();
    IEnumerable<ListboxItem>? OrganiserItems;
    bool MayEdit;
    int RegisteredModulesCount;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Meeting = Id > 0 ? await MeetingService.FindByIdAsync(Id) ?? new Meeting() : new Meeting();
        if (Meeting is not null)
        {
            OrganiserItems = await GroupService.ListboxItemsAsync(Principal, Meeting.OrganiserGroup?.CountryId);
            MayEdit = (Id == 0 && Principal.IsAuthenticated()) || (Id > 0 && await MeetingService.IsMeetingOrganiser(Principal, Meeting));
            RegisteredModulesCount = await LayoutService.ModulesRegisteredCountAsync(Principal, Id);
        }
    }

    async Task OnValidSubmit()
    {
        if (Meeting is not null)
        {
            var result = await MeetingService.SaveAsync(Principal, Meeting);
            if (result.Entity is not null) Meeting = result.Entity;
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }

    bool DatesIsLocked(Meeting meeting) =>
        !Principal.IsCountryAdministrator() &&
        (meeting.StartDate < TimeProvider.Now.Date.AddDays(7) ||
          RegisteredModulesCount > 0);

    string LayoutsHref(int meetingId) => $"meetings/{meetingId}/layouts/edit";
}
