@page "/Meetings/{id:int}/Edit"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject MeetingService MeetingService
@inject GroupService GroupService

<PageHeading Owner="Meeting" IconClass="@FontAwesome.Meeting" PageAction="@Id.ToPageAction()" HelpContext="Meeting" />

<EditTemplate Item="Meeting" ShowSaveButton="MayEdit" OnValidSubmit="OnValidSubmit">
    <Inputs>
        <AppInputSelect Width="4" @bind-Value="Meeting.OrganiserGroupId" Label="Organiser" Items="OrganiserItems" ShowPleaseSelect="true" />
        <AppInputText Width="3" @bind-Value="Meeting.PlaceName" Label="Venue" />
        <AppInputText Width="5" @bind-Value="Meeting.Description" Label="Description" />

        <AppInputDate Width="2" @bind-Value="Meeting.StartDate" Label="StartDate" />
        <AppInputDate Width="2" @bind-Value="Meeting.EndDate" Label="EndDate" />
        <AppInputSelect Width="2" @bind-Value="Meeting.Status" Label="Status" Items="EnumExtensions.MeetingStatusListboxItems()" />
        <AppInputCheck Width="2" @bind-Value="Meeting.IsFremo" Label="IsFremo" />
    </Inputs>
    <Buttons>

    </Buttons>
</EditTemplate>


@if (Meeting is not null)
{
    <h3 style="margin-top:12pt"><span class="fa fa-project-diagram" /> @Localizer["Layouts"]</h3>
    @if (MayEdit)
    {
        <div>
            <a class="btn btn-secondary btn-sm" href="Meetings/@Id/Layouts/0"><span class="@FontAwesome.Add" /> @Localizer.AddOrEdit("Layout", true)</a>

        </div>
    }
    <TableTemplate Items="Meeting.Layouts" HideNoRecordsToDisplay="true">
        <TableHeader>
            <th>@Localizer["PrimaryModuleStandard"]</th>
            <th>@Localizer["ResponsibleGroup"]</th>
            <th>@Localizer["OperatingPeriod"]</th>
            <th>@Localizer["Actions"]</th>
        </TableHeader>
        <RowTemplate Context="meetinglayout">
            <td>@meetinglayout.PrimaryModuleStandard.ShortName</td>
            <td>@meetinglayout.ResponsibleGroup.FullName</td>
            <td>@OperatingPeriod(meetinglayout)</td>
            <td>
                @if (MayEdit)
                    {
                    <a class="btn btn-secondary btn-sm" href="Meetings/@Id/Layouts/@meetinglayout.Id"><span class="@FontAwesome.Edit" /> @Localizer["Edit"]</a>
                    }
             </td>
        </RowTemplate>
    </TableTemplate>

}


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    ClaimsPrincipal? Principal;
    Meeting Meeting = new Meeting();
    IEnumerable<ListboxItem>? OrganiserItems;
    bool MayEdit;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Meeting = Id > 0 ? await MeetingService.FindByIdAsync(Principal, Id) ?? new Meeting() : new Meeting();
        if (Meeting is not null)
        {
            OrganiserItems = await GroupService.ListboxItemsAsync(Principal, Meeting.OrganiserGroup?.CountryId);
            MayEdit = await MeetingService.IsMeetingOrganiser(Principal, Meeting);
        }
    }

    async Task OnValidSubmit()
    {
        if (Meeting is not null)
        {
            var result = await MeetingService.SaveAsync(Principal, Meeting);
            if (result.Entity is not null)  Meeting = result.Entity;
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);

        }
    }

    string OperatingPeriod(Layout layout) => layout.FirstYear.HasValue && layout.LastYear.HasValue ? $"{layout.FirstYear}-{layout.LastYear}" : string.Empty;
}
