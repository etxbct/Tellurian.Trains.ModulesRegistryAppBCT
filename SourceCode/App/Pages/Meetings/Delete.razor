@page "/Meetings/{id:int}/Delete"

@attribute [Authorize(Policy = "Admin")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject ITimeProvider TimeProvider

@inject MeetingService MeetingService
@inject LayoutService LayoutService
@inject GroupService GroupService

<PageHeading Owner="Meeting" IconClass="@FontAwesome.Meeting" PageAction="@PageAction.Delete" />

@if (Meeting is null)
{
    <ActionMessage AlertType="warning" IconName="exclamation-circle" Label="NothingToDelete" />
}
else if (MayBeDeleted)
{
    <button class="btn btn-danger btn-sm" @onclick="OnDelete"><span class="@FontAwesome.Delete" /> @Localizer["ConfirmDelete"]</button>
}
else
{
    <ActionMessage AlertType="info" Label="ConditionsForDeleteNotMet" />
}


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    ClaimsPrincipal? Principal;
    Meeting? Meeting;

    bool MayBeDeleted => Principal.MayDelete(Meeting);

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Meeting = Id > 0 ? await MeetingService.FindByIdAsync(Id) ?? new Meeting() : new Meeting();
        if (Meeting is not null)
        {

        }
    }

    private async Task OnDelete()
    {
        if (Meeting is not null && Meeting.Id > 0)
        {
            var result = await MeetingService.DeleteAllAsync(Principal, Meeting);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }
}
