@page "/Meetings/{id:int}/View"

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject MeetingService MeetingService
@inject GroupService GroupService

@if (Meeting is null)
{
    <ActionMessage Label="NoRecordsToDisplay" AlertType="warning" />
}
else
{
    <h1><span class="@FontAwesome.Meeting" /> @Meeting.Name</h1>
    @if ((MeetingStatus)Meeting.Status == MeetingStatus.Canceled)
    {
        <h2 style="color: red">@Meeting.Status.MeetingStatus()</h2>
    }
    @Item("Venue", $"{Meeting.VenueName}: {Meeting.CityName}, {Meeting.OrganiserGroup.Country.EnglishName.AsLocalized()}")
    @Item("Dates", $"{Meeting.StartDate:ddd d MMM} - {Meeting.EndDate:ddd d MMM yyyy}")
    @Item("Organiser", Meeting.Organiser())
    @Item("Status", Meeting.Status.MeetingStatus())

    @Item("RegistrationOpens", $"{Meeting.RegistrationOpensDate():ddd d MMM yyyy}")
    @Item("RegistrationCloses", $"{Meeting.RegistrationClosingDate():ddd d MMM yyyy}")

    <AppButton Label="Layouts" IconName="Layout" Href="@LayoutsHref(Id)" />
    <MarkdownView Label="Details" Markdown="@Meeting.Details" />
    <MarkdownView Label="Accomodation" Markdown="@Meeting.Accomodation" />
    <MarkdownView Label="Food" Markdown="@Meeting.Food" />

}

@code
{
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }

    ClaimsPrincipal? Principal;
    Meeting? Meeting;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Meeting = await MeetingService.FindByIdAsync(Id);
    }

    string LayoutsHref(int id) => $"meetings/{id}/layouts/view";

    MarkupString Item(string label, string text, string element = "div") => 
        new(string.IsNullOrWhiteSpace(text) ? "" : $"<{element}>{Localizer[label]}: <strong>{text}</strong></{element}>");
}
