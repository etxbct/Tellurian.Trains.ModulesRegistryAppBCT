@page "/Meetings/{id:int}/View"

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject MeetingService MeetingService
@inject GroupService GroupService

@if (Meeting is null)
{
    <ActionMessage Label="NoRecordsToDisplay" AlertType="warning" />
}
else
{
    <h1><span class="@FontAwesome.Meeting" /> @Meeting.Description</h1>
    @if ((MeetingStatus)Meeting.Status == MeetingStatus.Canceled )
    {
        <h2 style="color: red">@Meeting.Status.MeetingStatus()</h2>
    }
    @Item("Venue", $"{Meeting.PlaceName}, {Meeting.OrganiserGroup.Country.EnglishName.AsLocalized()}")
    @Item("Dates", $"{Meeting.StartDate:ddd d MMM} - {Meeting.EndDate:ddd d MMM yyyy}")
    @Item("Organiser", Meeting.IsFremo ? $"{Meeting.OrganiserGroup.FullName}/FREMO" : $"{Meeting.OrganiserGroup.FullName}")
    @Item("Status", Meeting.Status.MeetingStatus())
    @if (Meeting.Layouts.Any())
    {
        <hr />
        <h2><span class="@FontAwesome.Layout" />@Localizer["Layouts"]</h2>
        @foreach (var item in Meeting.Layouts)
        {
            <div style="padding-top: 10pt; border-top: 1px solid black; min-height: 40pt">
                @Item("Layout", item.PrimaryModuleStandard.ShortName, "h3")
                @Item("RegistrationOpens", item.RegistrationOpeningDate.ToString("ddd d MMM yyyy"))
                @Item("ModuleRegistrationCloses", item.ModuleRegistrationClosingDate().ToString("ddd d MMM yyyy"))
                @Item("RegistrationCloses", item.RegistrationClosingDate.ToString("ddd d MMM yyyy"))
                @Item("Organiser", item.ResponsibleGroup.FullName)
                @Item("Note", item.Note)
                @Item("OperationTheme", item.Theme)
                @Item("Period", OperatingPeriod(item))
            </div>
            @if (Principal.IsAuthenticated())
            {
                <AppButton Label="Modules" IconName="@FontAwesome.Modules" Href="@LayoutModulesLink(item.Id)" />
            }
        }
    }
}

@code
{
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }

    ClaimsPrincipal? Principal;
    Meeting? Meeting;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Meeting = await MeetingService.FindByIdAsync(Id);
    }

    string OperatingPeriod(Layout layout) => layout.FirstYear.HasValue || layout.LastYear.HasValue ? $"{layout.FirstYear} - {layout.LastYear}" : string.Empty;
    string LayoutModulesLink(int id) => $"layouts/{id}/modules";

    MarkupString Item(string label, string text, string element = "div") => new(string.IsNullOrWhiteSpace(text) ? "" : $"<{element}>{Localizer[label]}: <strong>{text}</strong></{element}>");
}
