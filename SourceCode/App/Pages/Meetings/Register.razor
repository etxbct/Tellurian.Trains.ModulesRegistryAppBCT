@page "/Meetings/{MeetingId:int}/Register"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject ITimeProvider TimeProvider

@inject MeetingService MeetingService
@inject CountryService CountryService
@inject GroupService GroupService
@inject PersonService PersonService

<PageHeading Label="Registration" Owner="Meeting" IconClass="@FontAwesome.Register" PageAction="PageAction.Unknown" HelpContext="RegisterParticipant" />

@if (Meeting is null)
{
}
else
{
    @if (IsMeetingOrganiser)
    {
        <h3>@Localizer["SelectPersonToRegister"]</h3>
        <ListboxSelector ItemType="Country" OnSelected="OnSelectedCountry" Items="CountryItems" IsVisible="true" InitialSelectedId="CountryId" />
        <ListboxSelector ItemType="Person" OnSelected="OnSelectedPerson" Items="PeopleItems" IsVisible=" true" InitialSelectedId="PersonId" />
    }

    @if (Participant?.Id > 0)
    {
        <h4>@Localizer["Registered"]</h4>
        <ul>
            <li>@Localizer["Name"]: <strong>@Participant.Person.Name()</strong></li>
            <li>@Localizer["RegistrationTime"]: <strong>@Participant.RegistrationTime.ToString("g")</strong></li>
            <li>@Localizer["LatestArrivalTime"]: <strong>@Participant.ArrivalTime?.ToString("t")</strong> </li>
        </ul>
    }
    else if (Meeting.Id > 0 && PersonId > 0)
    {
        if (IsMeetingOrganiser || Principal.IsAnyAdministrator() || Meeting.IsOpenForRegistration(TimeProvider.Now.Date))
        {
            <button class="btn btn-sm btn-primary" @onclick="OnValidSubmit"><span class="@FontAwesome.Register" /> @Localizer["Register"]</button>
        }
    }

    if (Participant is not null)
    {

        <EditTemplate Item="Participant" OnValidSubmit="OnValidSubmit" ShowSaveButton="MayEdit(Participant)">
            <Inputs>
                <AppInputTime Width="2" @bind-Value="Participant.ArrivalTime" Label="LatestArrivalTime" />
                <AppInputFill Width="10" />
                <h3>@Localizer["Days"]</h3>
                <AppInputCheck Width="1" @bind-Value="Participant.ParticipateDay1" Label="@Meeting.Day(1).AsLocalized()" IsVisible="Meeting.DaysCount() > 0" />
                <AppInputCheck Width="1" @bind-Value="Participant.ParticipateDay2" Label="@Meeting.Day(2).AsLocalized()" IsVisible="Meeting.DaysCount() > 1" />
                <AppInputCheck Width="1" @bind-Value="Participant.ParticipateDay3" Label="@Meeting.Day(3).AsLocalized()" IsVisible="Meeting.DaysCount() > 2" />
                <AppInputCheck Width="1" @bind-Value="Participant.ParticipateDay4" Label="@Meeting.Day(4).AsLocalized()" IsVisible="Meeting.DaysCount() > 3" />
                <AppInputCheck Width="1" @bind-Value="Participant.ParticipateDay5" Label="@Meeting.Day(5).AsLocalized()" IsVisible="Meeting.DaysCount() > 4" />
            </Inputs>
        </EditTemplate>
        <hr />
        @if (Participant.Id > 0)
        {
            <TableTemplate Items="@PersonsLayoutParticipation">
                <TableHeader>
                    <th width="15%">@Localizer["Layout"]</th>
                    <th>@Localizer["Details"]</th>
                    <th width="100px">@Localizer["Actions"]</th>
                </TableHeader>
                <RowTemplate Context="item">
                    <td>@item.Layout?.PrimaryModuleStandard.ShortName</td>
                    <td><MarkdownView Markdown="@item.Layout?.Note"/></td>
                    <td><AppButton IconName="@RegisterModulesIconName(item)" Label="@RegisterModulesLabel(item)" Href="@RegisterModulesHref(item)" /></td>
                </RowTemplate>
            </TableTemplate>
        }
    }


}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int MeetingId { get; set; }

    ClaimsPrincipal? Principal;

    int CountryId;
    int PersonId;
    MeetingParticipant? Participant;
    Meeting? Meeting;
    IEnumerable<ListboxItem>? CountryItems;
    IEnumerable<ListboxItem>? PeopleItems;

    IEnumerable<LayoutParticipation> PersonsLayoutParticipation = LayoutParticipation(null, null);
    bool IsMeetingOrganiser;
    bool MayEdit(MeetingParticipant mp) => Meeting?.Id > 0 && (
        Principal.IsAnyAdministrator() ||
        IsMeetingOrganiser ||
        (!mp.CancellationTime.HasValue && mp.PersonId == Principal.PersonId() && Meeting.IsOpenForRegistration(TimeProvider.Now.Date)));

    string ParticipantLayouts(MeetingParticipant mp) => string.Join(',', mp.LayoutParticipations.Select(lm => lm.Layout.Name()));

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (MeetingId > 0)
        {
            Meeting = await MeetingService.FindByIdWithLayoutsAsync(Principal, MeetingId);
            if (Meeting is not null)
            {
                IsMeetingOrganiser = await MeetingService.IsMeetingOrganiser(Principal, Meeting);
                if (IsMeetingOrganiser)
                {
                    CountryItems = await CountryService.ListboxItemsAsync(Principal, IsMeetingOrganiser);
                }
                else
                {
                    await OnSelectedPerson(Principal.PersonId());
                }
            }
        }
    }


    async Task OnSelectedCountry(int countryId)
    {
        if (MeetingId > 0 && countryId > 0)
        {
            CountryId = countryId;
            PersonId = 0;
            PeopleItems = await PersonService.ListboxItemsAsync(Principal, countryId);
        }
    }

    async Task OnSelectedPerson(int personId)
    {
        if (MeetingId > 0 && personId > 0)
        {
            PersonId = personId;
            Participant = await MeetingService.FindParticipantAsync(Principal, MeetingId, personId) ??
                new MeetingParticipant { PersonId = personId, MeetingId = MeetingId };
            PersonsLayoutParticipation = LayoutParticipation(Meeting?.Layouts, Participant);
        }
    }

    async Task OnValidSubmit()
    {
        if (Meeting is not null && Participant is not null)
        {
            var result = await MeetingService.SaveAsync(Principal, Meeting, Participant);
            Participant = result.Entity;
            Meeting = await MeetingService.FindByIdWithLayoutsAsync(Principal, Meeting.Id);
            PersonsLayoutParticipation = LayoutParticipation(Meeting?.Layouts, Participant);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }

    async Task OnCancel(int particpantId)
    {
        var result = await MeetingService.CancelMeetingParticipaction(Principal, particpantId);
        ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
    }

    void OnParticipateInLayout(int layoutId)
    {
        if (Participant is null) return;
        var added = Meeting?.Layouts.SingleOrDefault(l => l.Id == layoutId);
        if (added is null) return;
        if (Participant.LayoutParticipations.Any(l => l.Id == layoutId)) return;
        LayoutParticipant layoutParticipant = new() { LayoutId = layoutId, MeetingParticipantId = Participant.Id, PersonId = Participant.PersonId };
        Participant.LayoutParticipations.Add(layoutParticipant);
        PersonsLayoutParticipation = LayoutParticipation(Meeting?.Layouts, Participant);
    }
    string ParticipateButtonLabel(Layout layout) => $"{Localizer["Participate"]} {layout.Name}";


    void OnCancelParticipateInLayout(int layoutId)
    {
        if (Participant is null) return;
        var removed = Participant.LayoutParticipations.SingleOrDefault(l => l.LayoutId == layoutId);
        if (removed is not null) Participant.LayoutParticipations.Remove(removed);
        PersonsLayoutParticipation = LayoutParticipation(Meeting?.Layouts, Participant);
    }

    string CancelParticipateButtonLabel(Layout layout) => $"{Localizer["Cancel"]} {layout.Name}";

    static IEnumerable<LayoutParticipation> LayoutParticipation(IEnumerable<Layout>? meetingLayouts, MeetingParticipant? participant)
    {
        if (meetingLayouts is null || meetingLayouts.Count() == 0 || participant is null) return Enumerable.Empty<LayoutParticipation>();
        var personsLayoutParticipations = meetingLayouts.Select(ml => new LayoutParticipation(ml, participant));
        //if (participant?.Layouts is null || participant.Layouts.Count() == 0) return personsLayoutParticipations;
        foreach (var participantLayout in participant.LayoutParticipations)
        {
            var p = personsLayoutParticipations.SingleOrDefault(x => x.Layout?.Id == participantLayout.LayoutId);
            if (p is not null) p.IsParticipating = true;
        }
        return personsLayoutParticipations;
    }

    string RegisterModulesHref(LayoutParticipation it) => $"/MeetingParticipants/{it.Participant.Id}/Layouts/{it.Layout.Id}/RegisterModules";
    string RegisterModulesLabel(LayoutParticipation it) => it.IsParticipating ? Localizer["Edit"] : Localizer["Participate"];
    string RegisterModulesIconName(LayoutParticipation it) => it.IsParticipating ? "Edit" : "Register";

}
