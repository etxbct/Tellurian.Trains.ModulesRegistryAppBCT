@page "/Meetings/{id:int}/Register"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject ITimeProvider TimeProvider

@inject MeetingService MeetingService
@inject CountryService CountryService
@inject GroupService GroupService

<PageHeading Label="Register" Owner="Meeting" IconClass="@FontAwesome.Register" PageAction="PageAction.Unknown" />

@if (Meeting is null)
{
}
else if (IsMeetingOrganizer) // Can submit any persons modules
{
    <h3>@Localizer["SelectPersonToRegister"]</h3>
    <ListboxSelector ItemType="Country" OnSelected="OnSelectedCountry" Items="CountryItems" IsVisible="true" InitialSelectedId="CountryId" />
    <ListboxSelector ItemType="Person" OnSelected="OnSelectedPerson" Items="PeopleItems" IsVisible=" true" InitialSelectedId="PersonId" />
    @if (Participant?.Id > 0)
    {
        <h4>@Localizer["Registered"]</h4>
        <ul>
            <li>@Participant.Person.Name()</li>
            <li>@Meeting?.Description</li>
            <li>@Participant.RegistrationTime.ToString("d")</li>
        </ul>
    }
    else if (Meeting?.Id > 0 && PersonId > 0)
    {
        <button class="btn btn-sm btn-primary" @onclick="OnValidSubmit"><span class="@FontAwesome.Register" /> @Localizer["Register"]</button>
    }
    <hr />

    @if (Meeting is null || Meeting.Participants.Count == 0)
    {

    }
    else
    {
        <h3>@Localizer["Participants"]</h3>
        <TableTemplate Items="Meeting.Participants">
            <TableHeader>
                <th>@Localizer["Name"]</th>
                <th>@Localizer["CityName"]</th>
                <th>@Localizer["Country"]</th>
                <th>@Localizer["Registered"]</th>
                <th>@Localizer["Withdrawn"]</th>
                <th>@Localizer["Actions"]</th>
            </TableHeader>
            <RowTemplate Context="item">
                <td>@item.Person.Name()</td>
                <td>@item.Person.CityName</td>
                <td>@item.Person.Country.EnglishName.Localized()</td>
                <td>@item.RegistrationTime.ToString("d")</td>
                <td>@item.CancellationTime?.ToString("d")</td>
                <td>
                    @if (!item.CancellationTime.HasValue)
                            {
                        <AppButton Label="RegisterModules" Href="@RegistrtationHref(item.Meeting.Id, item.Id)" Type="primary" IconName="plus-square" />
                        <AppButton Label="Cancel" OnClickCallback="@(() => OnCancel(item.Id))" IsDisabled="true" />
                            }
                </td>
            </RowTemplate>
        </TableTemplate>

    }
}
else // Its an ordinary user that only can submit owned modules.
{
    @if (Participant?.Id > 0)
    {
        <h4>@Localizer["Registered"]</h4>
        <ul>
            <li>@Participant.Person.Name()</li>
            <li>@Meeting?.Description</li>
            <li>@Participant.RegistrationTime.ToString("d")</li>
        </ul>
        <hr />
        <a class="btn btn-sm btn-primary" href="Meeting/@Participant.MeetingId/Register/@Participant.Id/Modules" disabled><span class="@FontAwesome.Module" /> @Localizer["RegisterModules"]</a>
    }
    else
    {
        <button class="btn btn-sm btn-primary" @onclick="OnValidSubmit"><span class="@FontAwesome.Register" /> @Localizer["Register"]</button>
    }
}


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    ClaimsPrincipal? Principal;
    int CountryId;
    int PersonId;
    MeetingParticipant? Participant;
    Meeting? Meeting;
    IEnumerable<ListboxItem>? CountryItems;
    IEnumerable<ListboxItem>? PeopleItems;
    bool IsMeetingOrganizer;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (Id > 0)
        {
            Meeting = await MeetingService.FindByIdWithParticipantsAsync(Principal, Id);
            if (Meeting is not null)
            {
                IsMeetingOrganizer = await MeetingService.IsMeetingOrganiser(Principal, Meeting);
                if (IsMeetingOrganizer)
                {
                    CountryItems = await CountryService.ListboxItemsAsync(Principal, IsMeetingOrganizer);
                }
                else
                {
                    await OnSelectedPerson(Principal.PersonId());
                }
            }
        }
    }

    async Task OnSelectedCountry(int countryId)
    {
        if (Id > 0 && countryId > 0)
        {
            CountryId = countryId;
            PersonId = 0;
            PeopleItems = await MeetingService.PeopleListboxItemsAsync(Principal, Id, countryId);
        }
    }

    async Task OnSelectedPerson(int personId)
    {
        if (Id > 0 && personId > 0)
        {
            PersonId = personId;
            Participant = await MeetingService.FindParticipantAsync(Principal, Id, personId) ?? new MeetingParticipant { PersonId = personId, MeetingId = Id };
        }
    }

    async Task OnValidSubmit()
    {
        if (Meeting is not null && Participant is not null)
        {
            var result = await MeetingService.SaveAsync(Principal, Meeting, Participant);
            Participant = result.Entity;
            Meeting = await MeetingService.FindByIdWithParticipantsAsync(Principal, Meeting.Id);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }

    async Task OnCancel(int particpantId)
    {

    }

    string RegistrtationHref(int meetingId, int participantId) => $"Meeting/{meetingId}/Register/{participantId}/Modules";
}
