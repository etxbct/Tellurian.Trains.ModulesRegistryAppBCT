@page "/Meetings/{MeetingId:int}/Register"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject ITimeProvider TimeProvider

@inject MeetingService MeetingService
@inject CountryService CountryService
@inject GroupService GroupService
@inject PersonService PersonService

<PageHeading Label="Registration" Owner="Meeting" IconClass="@FontAwesome.Register" PageAction="PageAction.Unknown" HelpContext="RegisterParticipant" />

@if (Meeting is null)
{
}
else
{
    @if (IsMeetingOrganiser)
    {
        <h3>@Localizer["SelectPersonToRegister"]</h3>
        <ListboxSelector ItemType="Country" OnSelected="OnSelectedCountry" Items="CountryItems" IsVisible="true" InitialSelectedId="CountryId" />
        <ListboxSelector ItemType="Person" OnSelected="OnSelectedPerson" Items="PeopleItems" IsVisible=" true" InitialSelectedId="PersonId" />
    }

    @if (Participant?.Id > 0)
    {
        <h4>@Localizer["Registered"]</h4>
        <ul>
            <li>@Localizer["Name"]: <strong>@Participant.Person.Name()</strong></li>
            <li>@Localizer["RegistrationTime"]: <strong>@Participant.RegistrationTime.ToString("g")</strong></li>
        </ul>
    }
    else if (Meeting.Id > 0 && PersonId > 0)
    {
        if (IsMeetingOrganiser || Principal.IsAnyAdministrator() || Meeting.IsOpenForRegistration(TimeProvider.Now.Date))
        {
            <button class="btn btn-sm btn-primary" @onclick="OnValidSubmit"><span class="@FontAwesome.Register" /> @Localizer["Register"]</button>
        }
    }

    if (Participant is not null)
    {

        <EditTemplate Item="Participant" OnValidSubmit="OnValidSubmit" ShowSaveButton="MayEdit(Participant)">
            <Inputs>
                <AppInputCheck Width="2" @bind-Value="Participant.ParticipateDay1" Label="@Meeting.Day(1).AsLocalized()" IsVisible="Meeting.DaysCount() > 0" />
                <AppInputCheck Width="2" @bind-Value="Participant.ParticipateDay2" Label="@Meeting.Day(2).AsLocalized()" IsVisible="Meeting.DaysCount() > 1" />
                <AppInputCheck Width="2" @bind-Value="Participant.ParticipateDay3" Label="@Meeting.Day(3).AsLocalized()" IsVisible="Meeting.DaysCount() > 2" />
                <AppInputCheck Width="2" @bind-Value="Participant.ParticipateDay4" Label="@Meeting.Day(4).AsLocalized()" IsVisible="Meeting.DaysCount() > 3" />
                <AppInputCheck Width="2" @bind-Value="Participant.ParticipateDay5" Label="@Meeting.Day(5).AsLocalized()" IsVisible="Meeting.DaysCount() > 4" />
                <AppInputDateNullable Width="4" @bind-Value="Participant.ArrivalTime" Label="ArrivalTime"/>
            </Inputs>
        </EditTemplate>
    }

    <hr />


}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int MeetingId { get; set; }

    ClaimsPrincipal? Principal;

    int CountryId;
    int PersonId;
    MeetingParticipant? Participant;
    Meeting? Meeting;
    IEnumerable<ListboxItem>? CountryItems;
    IEnumerable<ListboxItem>? PeopleItems;

    bool IsMeetingOrganiser;
    bool MayEdit(MeetingParticipant mp) => Meeting?.Id > 0 && ( 
        Principal.IsAnyAdministrator() || 
        IsMeetingOrganiser || 
        (!mp.CancellationTime.HasValue  && mp.PersonId == Principal.PersonId() && Meeting.IsOpenForRegistration(TimeProvider.Now.Date)));

    string ParticipantLayouts(MeetingParticipant mp) => string.Join(',', mp.Layouts.Select(lm => lm.Layout.Name()));

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (MeetingId > 0)
        {
            Meeting = await MeetingService.FindByIdWithLayoutsAsync(Principal, MeetingId);
            if (Meeting is not null)
            {
                IsMeetingOrganiser = await MeetingService.IsMeetingOrganiser(Principal, Meeting);
                if (IsMeetingOrganiser)
                {
                    CountryItems = await CountryService.ListboxItemsAsync(Principal, IsMeetingOrganiser);
                }
                else
                {
                    await OnSelectedPerson(Principal.PersonId());
                }
            }
        }
    }


    async Task OnSelectedCountry(int countryId)
    {
        if (MeetingId > 0 && countryId > 0)
        {
            CountryId = countryId;
            PersonId = 0;
            PeopleItems = await PersonService.ListboxItemsAsync(Principal, countryId);
        }
    }

    async Task OnSelectedPerson(int personId)
    {
        if (MeetingId > 0 && personId > 0)
        {
            PersonId = personId;
            Participant = await MeetingService.FindParticipantAsync(Principal, MeetingId, personId) ??
                new MeetingParticipant { PersonId = personId, MeetingId = MeetingId, RegistrationTime = TimeProvider.Now };
        }
    }

    async Task OnValidSubmit()
    {
        if (Meeting is not null && Participant is not null)
        {
            var result = await MeetingService.SaveAsync(Principal, Meeting, Participant);
            Participant = result.Entity;
            Meeting = await MeetingService.FindByIdWithParticipantsAsync(Principal, Meeting.Id);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }

    async Task OnCancel(int particpantId)
    {
        var result = await MeetingService.CancelMeetingParticipaction(Principal, particpantId);
        ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
    }

}
