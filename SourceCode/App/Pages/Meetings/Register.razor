@page "/Meetings/{id:int}/Register"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject ITimeProvider TimeProvider

@inject MeetingService MeetingService
@inject CountryService CountryService
@inject GroupService GroupService
@inject PersonService PersonService

<PageHeading Label="Registration" Owner="Meeting" IconClass="@FontAwesome.Register" PageAction="PageAction.Unknown" HelpContext="RegisterParticipant" />

@if (Meeting is null)
{
}
else
{
    @if (IsMeetingOrganizer)
    {
        <h3>@Localizer["SelectPersonToRegister"]</h3>
        <ListboxSelector ItemType="Country" OnSelected="OnSelectedCountry" Items="CountryItems" IsVisible="true" InitialSelectedId="CountryId" />
        <ListboxSelector ItemType="Person" OnSelected="OnSelectedPerson" Items="PeopleItems" IsVisible=" true" InitialSelectedId="PersonId" />
    }

    @if (Participant?.Id > 0)
    {
        <h4>@Localizer["Registered"]</h4>
        <ul>
            <li>@Localizer["Name"]: <strong>@Participant.Person.Name()</strong></li>
            <li>@Localizer["RegistrationTime"]: <strong>@Participant.RegistrationTime.ToString("g")</strong></li>
        </ul>
    }
    else if (Meeting.Id > 0 && PersonId > 0 && Meeting.IsOpenForRegistration(TimeProvider.Now.Date))
    {
        <button class="btn btn-sm btn-primary" @onclick="OnValidSubmit"><span class="@FontAwesome.Register" /> @Localizer["Register"]</button>
    }
    <hr />

    <h3>@Localizer["Participants"]</h3>
    <TableTemplate Items="Meeting.Participants">
        <TableHeader>
            <th>@Localizer["Name"]</th>
            <th>@Localizer["CityName"]</th>
            <th>@Localizer["Country"]</th>
            <th>@Localizer["Registered"]</th>
            <th>@Localizer["Layouts"]</th>
            @if (IsMeetingOrganizer)
            {
                <th>@Localizer["Withdrawn"]</th>
            }
            <th>@Localizer["Actions"]</th>
        </TableHeader>
        <RowTemplate Context="item">
            <td>@item.Person.Name()</td>
            <td>@item.Person.CityName</td>
            <td>@item.Person.Country.EnglishName.Localized()</td>
            <td>@item.RegistrationTime.ToString("g")</td>
            <td>@ParticipantLayouts(item)</td>
            @if (IsMeetingOrganizer)
            {
                <td>@item.CancellationTime?.ToString("g")</td>
            }
            <td>
                @if (MayEdit(item))
                    {
                    <AppButton Label="RegisterModules" Href="@RegistrationHref(item.Meeting.Id, item.Id)" Type="primary" IconName="plus-square" />
                    <AppButton Label="Cancel" OnClickCallback="@(() => OnCancel(item.Id))" IsDisabled="true" />
                    }
            </td>
        </RowTemplate>
    </TableTemplate>
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    ClaimsPrincipal? Principal;

    int CountryId;
    int PersonId;
    MeetingParticipant? Participant;
    Meeting? Meeting;
    IEnumerable<ListboxItem>? CountryItems;
    IEnumerable<ListboxItem>? PeopleItems;

    bool IsMeetingOrganizer;
    bool MayEdit(MeetingParticipant mp) => !mp.CancellationTime.HasValue && (IsMeetingOrganizer || mp.PersonId == Principal.PersonId());
    string RegistrationHref(int meetingId, int participantId) => $"Meeting/{meetingId}/Register/{participantId}/Modules";
    string ParticipantLayouts(MeetingParticipant mp) => mp.LayoutModules.Any() ? string.Join(',', mp.LayoutModules.Select(lm => lm.Layout.Name()).Distinct()) : Localizer["NoModulesRegistered"].ToString();

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (Id > 0)
        {
            Meeting = await MeetingService.FindByIdWithParticipantsAsync(Principal, Id);
            if (Meeting is not null)
            {
                IsMeetingOrganizer = await MeetingService.IsMeetingOrganiser(Principal, Meeting);
                if (IsMeetingOrganizer)
                {
                    CountryItems = await CountryService.ListboxItemsAsync(Principal, IsMeetingOrganizer);
                }
                else
                {
                    await OnSelectedPerson(Principal.PersonId());
                }
            }
        }
    }

    async Task OnSelectedCountry(int countryId)
    {
        if (Id > 0 && countryId > 0)
        {
            CountryId = countryId;
            PersonId = 0;
            PeopleItems = await PersonService.ListboxItemsAsync(Principal, countryId);
        }
    }

    async Task OnSelectedPerson(int personId)
    {
        if (Id > 0 && personId > 0)
        {
            PersonId = personId;
            Participant = await MeetingService.FindParticipantAsync(Principal, Id, personId) ?? new MeetingParticipant { PersonId = personId, MeetingId = Id };
        }
    }

    async Task OnValidSubmit()
    {
        if (Meeting is not null && Participant is not null)
        {
            var result = await MeetingService.SaveAsync(Principal, Meeting, Participant);
            Participant = result.Entity;
            Meeting = await MeetingService.FindByIdWithParticipantsAsync(Principal, Meeting.Id);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }

    async Task OnCancel(int particpantId)
    {
        var result = await MeetingService.CancelParticipaction(Principal, particpantId);
        ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
    }

}
