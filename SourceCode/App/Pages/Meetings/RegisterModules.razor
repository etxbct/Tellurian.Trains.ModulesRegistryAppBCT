@page "/MeetingParticipants/{MeetingParticipantId:int}/Layouts/{LayoutId:int}/RegisterModules"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject ITimeProvider TimeProvider

@inject MeetingService MeetingService
@inject LayoutService LayoutService
@inject LayoutParticipantService LayoutParticipantService
@inject CountryService CountryService
@inject GroupService GroupService
@inject ModuleService ModuleService

<PageHeading Label="RegisterModules" Owner="Meeting" IconClass="@FontAwesome.Layout" PageAction="PageAction.List" HelpContext="RegisterModules" />
<div>
    <h2>@Localizer["Participant"]: @MeetingParticipant?.Person.Name()</h2>
</div>
@if (LayoutParticipant is null)
{
}
else
{
    <div style="margin-top: 12pt">
        @if (Layout is not null)
        {
            <h3>@Localizer["AvailableModules"]</h3>
            <TableTemplate Items="MyPackages" Key="Key">
                <TableHeader>
                    <th>@Localizer["Package"]</th>
                    <th>@Localizer["Owner"]</th>
                    <th>@Localizer["Modules"]</th>
                    <th>@Localizer["Actions"]</th>
                </TableHeader>
                <RowTemplate Context="item">
                    <td>@item.Name</td>
                    <td>@item.OwnerName</td>
                    <td>@item.ToString()</td>
                    <td>
                        <AppButton Label="Add" OnClickCallback="@(() => OnRegisterPackage(item.Id))" IsDisabled="false" />
                    </td>
                </RowTemplate>
            </TableTemplate>

            <h3>@Localizer["RegisteredModules"]</h3>

            <TableTemplate Items="MyRegisteredModules">
                <TableHeader>
                    <th>@Localizer["Package"]</th>
                    <th>@Localizer["Owner"]</th>
                    <th>@Localizer["Module"]</th>
                    <th>@Localizer["RegistrationTime"]</th>
                    <th>@Localizer["Position"] </th>
                    <th>@Localizer["Actions"]</th>
                </TableHeader>
                <RowTemplate Context="item">
                    <td>@(item.Module.PackageLabel ?? item.Module.FullName)</td>
                    <td>@item.Module.ModuleOwnerships.OwnerNames()</td>
                    <td>@item.Module.FullName</td>
                    <td>@item.RegisteredTime.ToString("g")</td>
                    <td>@item.LayoutPosition()</td>
                    <td>
                        @if (MayCancel(item))
                        {
                            <AppButton Label="Remove" OnClickCallback="(() => OnCancel(item.Id))" IconName="@FontAwesome.Modules" />
                        }
                    </td>
                </RowTemplate>
            </TableTemplate>
        }
    </div>
}

@code {

    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int MeetingParticipantId { get; set; }
    [Parameter] public int LayoutId { get; set; }

    ClaimsPrincipal? Principal;

    Meeting? Meeting;
    Layout? Layout;
    MeetingParticipant? MeetingParticipant;
    LayoutParticipant? LayoutParticipant;
    ModuleOwnershipRef? OwnershipRef;

    IEnumerable<Module>? Modules = Array.Empty<Module>();
    IEnumerable<Module>? AvailableModules;
    IEnumerable<LayoutModule> AllRegisteredModules = new List<LayoutModule>();
    IEnumerable<ModulePackage>? MyPackages = Array.Empty<ModulePackage>();
    IEnumerable<LayoutModule>? MyRegisteredModules = Enumerable.Empty<LayoutModule>();

    bool MayCancel(LayoutModule lm) => Principal.IsAnyGroupAdministrator(Meeting?.OrganiserGroup) || (lm.IsNotInUse() && Layout.RegistrationIsOpen(TimeProvider.Now));

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();

        if (MeetingParticipantId > 0)
        {
            MeetingParticipant = await MeetingService.FindParticipantAsync(Principal, MeetingParticipantId);
            if (MeetingParticipant is not null)
            {
                Meeting = MeetingParticipant.Meeting;
                if (LayoutId > 0)
                {
                    Layout = Meeting.Layouts.SingleOrDefault(l => l.Id == LayoutId);
                    LayoutParticipant = await LayoutParticipantService.GetByIdAsync(Principal, MeetingParticipant.Id, LayoutId);
                    if (LayoutParticipant is null && Layout is not null)
                    {
                        await RegisterParticipation(MeetingParticipant, Layout);
                    }
                    if (LayoutParticipant is not null)
                    {
                        OwnershipRef = ModuleOwnershipRef.Person(LayoutParticipant.PersonId);
                        await Update();
                    }
                }
            }
        }
    }

    async Task<IEnumerable<Module>> AllModules(ModuleOwnershipRef ownershipRef)
    {
        if (LayoutParticipant is not null && Layout is not null)
        {
            return await LayoutService.GetAvailableModules(Principal, LayoutParticipant, Layout);
        }
        return (await ModuleService.GetAllAsync(Principal, ownershipRef)).Concat(await ModuleService.GetAllGroupOwnedForDataAdministrator(Principal, ownershipRef));
    }

    async Task RegisterParticipation(MeetingParticipant? meetingParticipant, Layout? layout)
    {
        if (meetingParticipant is not null && layout is not null)
        {
            var participant = new LayoutParticipant { LayoutId = layout.Id, MeetingParticipantId = meetingParticipant.Id, PersonId = meetingParticipant.PersonId };
            var result = await LayoutParticipantService.SaveAsync(Principal, participant);
            LayoutParticipant = result.Entity;
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }

    async Task OnRegisterPackage(int packageId)
    {
        var package = MyPackages?.SingleOrDefault(p => p.Id == packageId);
        if (package is not null && Layout is not null && LayoutParticipant is not null)
        {
            var result = await LayoutService.AddPackageModulesAsync(Principal, LayoutParticipant.Id, package);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
            await Update();
        }
    }

    async Task OnCancel(int layoutModuleId)
    {
        if (Layout is not null && LayoutParticipant is not null)
        {
            var result = await LayoutService.RemoveModuleAsync(Principal, layoutModuleId);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
            await Update();
        }
    }

    async Task Update()
    {
        if (Layout is not null && LayoutParticipant is not null)
        {
            Modules = await LayoutService.GetAvailableModules(Principal, LayoutParticipant, Layout);
            AllRegisteredModules = await LayoutService.GetRegisteredModulesAsync(Principal, 0);
            MyRegisteredModules = AllRegisteredModules.Where(rm => rm.LayoutParticipant.Id == LayoutParticipant.Id).ToList();
            AvailableModules = Available(Modules, Layout.PrimaryModuleStandard.ScaleId);
            MyPackages = AvailableModules.AsPackages();
        }
    }

    string Key(ModulePackage package) => package.Name;
    IEnumerable<Module> Available(IEnumerable<Module>? modules, int scaleId) => modules is null ? Array.Empty<Module>() : modules.Where(m => !m.IsUnavailable && m.ScaleId == scaleId && !AllRegisteredModuleIds.Contains(m.Id));
    IEnumerable<int> AllRegisteredModuleIds => AllRegisteredModules.Select(m => m.ModuleId);
    IEnumerable<ListboxItem> LayoutItems => Meeting is null ? Array.Empty<ListboxItem>() : Meeting.Layouts.Select(l => new ListboxItem(l.Id, l.Name())).ToList();
}
