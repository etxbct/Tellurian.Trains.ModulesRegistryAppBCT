@page "/Meeting/{MeetingId:int}/Register/{ParticipantId:int}/Modules"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject ITimeProvider TimeProvider

@inject MeetingService MeetingService
@inject LayoutService LayoutService
@inject CountryService CountryService
@inject GroupService GroupService
@inject ModuleService ModuleService

<PageHeading Label="RegisterModules" Owner="Meeting" IconClass="@FontAwesome.Layout" PageAction="PageAction.List" HelpContext="RegisterModules" />

<div>
    <h2>@Localizer["Participant"]: @Participant?.Person.Name()</h2>
</div>

<ListboxSelector ItemType="Layout" Items="LayoutItems" IsVisible="@(LayoutItems.Count() > 1)" OnSelected="OnSelectedLayout" />

<div style="margin-top: 12pt">
    @if (Layout is not null)
    {

        <h3>@Localizer["AvailableModules"]</h3>
        <TableTemplate Items="Packages" Key="Key">
            <TableHeader>
                <th>@Localizer["Package"]</th>
                <th>@Localizer["Modules"]</th>
                <th>@Localizer["Actions"]</th>
            </TableHeader>
            <RowTemplate Context="item">
                <td>@item.Name</td>
                <td>@item.ToString()</td>
                <td>
                    <AppButton Label="Add" OnClickCallback="@(() => OnRegister(item.Id))" IsDisabled="false" />
                </td>
            </RowTemplate>
        </TableTemplate>

        <h3>@Localizer["RegisteredModules"]</h3>

        <TableTemplate Items="RegisteredModules">
            <TableHeader>
                <th>@Localizer["Package"]</th>
                <th>@Localizer["Module"]</th>
                <th>@Localizer["RegistrationTime"]</th>
                <th>@Localizer["Position"] </th>
                <th>@Localizer["Actions"]</th>
            </TableHeader>
            <RowTemplate Context="item">
                <td>@(item.Module.PackageLabel ?? item.Module.FullName)</td>
                <td>@item.Module.FullName</td>
                <td>@item.RegisteredTime.ToString("g")</td>
                <td>@item.LayoutPosition()</td>
                <td>
                    @if (MayCancel(item))
                        {
                        <AppButton Label="Cancel" OnClickCallback="(() => OnCancel(item.Id))" />
                        }
                </td>
            </RowTemplate>
        </TableTemplate>
    }
</div>
@code {

    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int ParticipantId { get; set; }
    [Parameter] public int MeetingId { get; set; }
    ClaimsPrincipal? Principal;

    Meeting? Meeting;
    Layout? Layout;
    MeetingParticipant? Participant;
    IEnumerable<Module>? Modules = Array.Empty<Module>();
    IEnumerable<Module>? AvailableModules;
    IEnumerable<LayoutModule> RegisteredModules = new List<LayoutModule>();
    IEnumerable<ModulePackage>? Packages = Array.Empty<ModulePackage>();

    bool MayCancel(LayoutModule lm) => Principal.IsAnyGroupAdministrator(Meeting?.OrganiserGroup) || (lm.IsNotInUse() && Layout.RegistrationIsOpen(TimeProvider.Now));

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (MeetingId > 0 && ParticipantId > 0)
        {
            Meeting = await MeetingService.FindByIdAsync(Principal, MeetingId);
            if (Meeting is not null)
            {
                if (Meeting.Layouts.Count == 1) Layout = Meeting.Layouts.First();
                Participant = await MeetingService.FindParticipantAsync(Principal, ParticipantId);
                if (Participant is not null)
                {
                    Modules = await ModuleService.GetAllAsync(Principal, ModuleOwnershipRef.Person(Participant.PersonId));
                    await Update();
                }
            }
        }
    }

    async Task OnSelectedLayout(int layoutId)
    {
        var layout = MeetingLayout(layoutId);
        if (layout is not null)
        {
            Layout = layout;
            await Update();
        }
    }

    async Task OnRegister(int packageId)
    {
        var package = Packages?.SingleOrDefault(p => p.Id == packageId);
        if (package is not null && Layout is not null)
        {
            var result = await LayoutService.AddPackageModulesAsync(Principal, ParticipantId, Layout.Id, package);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
            await Update();
        }
    }

    async Task OnCancel(int layoutModuleId)
    {
        if (Layout is not null && Participant is not null)
        {
            var result = await LayoutService.RemoveModuleAsync(Principal, layoutModuleId);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
            await Update();
        }

    }

    async Task Update()
    {
        if (Layout is not null && Participant is not null)
        {
            RegisteredModules = await LayoutService.GetRegisteredModulesAsync(Principal, Participant.Id, Layout.Id);
            AvailableModules = Available(Modules, Layout.PrimaryModuleStandard.ScaleId);
            Packages = AvailableModules.AsPackages();
        }
    }

    Layout? MeetingLayout(int layoutId) => Meeting?.Layouts.SingleOrDefault(l => l.Id == layoutId);
    string Key(ModulePackage package) => package.Name;
    IEnumerable<Module> Available(IEnumerable<Module>? modules, int scaleId) => modules is null ? Array.Empty<Module>() : modules.Where(m => !m.IsUnavailable && m.ScaleId == scaleId && !RegisteredModuleIds.Contains(m.Id));
    IEnumerable<int> RegisteredModuleIds => RegisteredModules.Select(m => m.ModuleId);
    IEnumerable<ListboxItem> LayoutItems => Meeting is null ? Array.Empty<ListboxItem>() : Meeting.Layouts.Select(l => new ListboxItem(l.Id, l.Name())).ToList();
}
