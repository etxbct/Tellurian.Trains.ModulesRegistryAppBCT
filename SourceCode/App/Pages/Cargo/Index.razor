@page "/Cargo/Index"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject CargoService CargoService

<PageHeading ObjectName="CargoTypes" IconClass="@FontAwesome.Cargo" PageAction="PageAction.List" HelpContext="CargoTypes" ShowHelpInitially="false" />

@if (MayEdit)
{
    <div class="col-12">
        <AppButton Label="Add" Href="@("cargo/0/edit/")" />
        @if (HasFilter)
        {
            <AppButton Label="RemoveFiltering" IconName="@FontAwesome.Erase" OnClickCallback="RemoveFilter" />
        }
    </div>
}
<div class="grid" tabindex="-1">
    <QuickGrid Items="@FilteredItems" Virtualize="true" Pagination="PaginationState">
        <PropertyColumn Property="@(c => c.NhmCodeOrEmpty())" Sortable="true" Title="@Localizer["NHMCode"]">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="NhmCodeFilter" @bind:event="oninput" placeholder="@Localizer["NHMCode"]" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(c => c.LocalizedName().Value)" Sortable="true" Title="@Localizer["Name"]">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="NameFilter" @bind:event="oninput" placeholder="@Localizer["Name"]" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(c => c.FromYear)" Title="@Localizer["FromYear"]" Align="Align.Center" />
        <PropertyColumn Property="@(c => c.UptoYear)" Title="@Localizer["UptoYear"]" Align="Align.Center" />
        <TemplateColumn Title="@Localizer["Actions"]" Context="cargo">
            @if (MayEdit)
            {
                <a class="btn btn-primary btn-sm" href="Cargo/@cargo.Id/Edit"><span class="@FontAwesome.Edit" /> @Localizer["Edit"]</a>
            }
        </TemplateColumn>
    </QuickGrid>
</div>
<Paginator State="@PaginationState">

</Paginator>

@*<TableTemplate Items="Cargos?.OrderBy(c => c.NhmCode)">
    <TableHeader>
        <th>@Localizer["NHMCode"]</th>
        <th>@Localizer["Name"]</th>
        <th>@Localizer["DefaultClasses"]</th>
        <th style="text-align: center">@Localizer["FromYear"]</th>
        <th style="text-align: center">@Localizer["UptoYear"]</th>
        <th>@Localizer["Actions"]</th>
    </TableHeader>
    <RowTemplate Context="cargo">
        <td>@cargo.NhmCodeOrEmpty()</td>
        <td>@cargo.LocalizedName()</td>
        <td>@cargo.DefaultClasses</td>
        <td style="text-align: center">@cargo.FromYear</td>
        <td style="text-align: center">@cargo.UptoYear</td>
        <td>
            @if (MayEdit)
            {
                <a class="btn btn-primary btn-sm" href="Cargo/@cargo.Id/Edit"><span class="@FontAwesome.Edit" /> @Localizer["Edit"]</a>
            }
        </td>
    </RowTemplate>
</TableTemplate>*@


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    ClaimsPrincipal? Principal;
    IEnumerable<Cargo>? Cargos;
    bool MayEdit;

    IQueryable<Cargo> FilteredItems
    {
        get
        {
            if (Cargos is null) return Enumerable.Empty<Cargo>().AsQueryable();
            return Cargos.AsQueryable()
                .Where(c => (NhmCodeFilter.HasNoValue() || c.NhmCode.ToString().StartsWith(NhmCodeFilter)) &&
                NameFilter.HasNoValue() || NameFilter.HasValue() && c.LocalizedName().Value.Contains(NameFilter, StringComparison.CurrentCultureIgnoreCase));

        }
    }

    PaginationState PaginationState = new() { ItemsPerPage = 20 };
    string? NhmCodeFilter;
    string? NameFilter;
    bool HasFilter => NhmCodeFilter.HasValue() || NameFilter.HasValue();
    void RemoveFilter()
    {
        NhmCodeFilter = default;
        NameFilter = default;
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        MayEdit = Principal.IsCountryOrGlobalAdministrator();
        Cargos = (await CargoService.GetAll()).OrderBy(c => c.NhmCode);
    }
}
