@page "/Cargo/{id:int}/Edit"

@attribute [Authorize(Policy = "Admin")]

@inject PageHistory PageHistory
@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject CargoService CargoService

<PageHeading ObjectName="Cargo" IconClass="@FontAwesome.Cargo" PageAction="Id.ToAddOrEditPageAction()" />

<EditTemplate Item="Cargo" OnValidSubmit="OnValidSubmit">
    <Inputs>
        <AppInputSelect Width="12" Label="NHMCode" Items="NextLevelNhmCodeItems" @bind-Value="Cargo.NhmCode" ShowPleaseSelect="true" ItemHeight="60" />

        <AppInputText Width="4" Label="DefaultClasses" @bind-Value="Cargo.DefaultClasses" />
        <AppInputNumber Width="2" Label="FromYear" @bind-Value="Cargo.FromYear" />
        <AppInputNumber Width="2" Label="ToYear" @bind-Value="Cargo.UptoYear" />
        <AppInputFill Width="4" />

        <AppInputText Width="4" Label="English" @bind-Value="Cargo.EN" />
        <AppInputText Width="4" Label="German" @bind-Value="Cargo.DE" />
        <AppInputText Width="4" Label="Dutch" @bind-Value="Cargo.NL" />

        <AppInputText Width="4" Label="French" @bind-Value="Cargo.FR" />
        <AppInputText Width="4" Label="Italian" @bind-Value="Cargo.IT" />
        <AppInputText Width="4" Label="Polish" @bind-Value="Cargo.PL" />

        <AppInputText Width="4" Label="Danish" @bind-Value="Cargo.DA" />
        <AppInputText Width="4" Label="Swedish" @bind-Value="Cargo.SV" />
        <AppInputText Width="4" Label="Norwegian" @bind-Value="Cargo.NB" />
    </Inputs>
</EditTemplate>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }

    private ClaimsPrincipal? Principal;

    Cargo Cargo = new Cargo();
    IEnumerable<ListboxItem>? TopLevelNhmCodeItems;
    IEnumerable<ListboxItem>? NextLevelNhmCodeItems;
    int LastTopLevelId;

    protected async override Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        TopLevelNhmCodeItems = await CargoService.GetNhmItems(Principal);
        NextLevelNhmCodeItems = await CargoService.GetNhmItems(Principal, 0);
    }

    protected override async Task OnParametersSetAsync()
    {
        Cargo = Id > 0 ? await CargoService.FindByIdAsync(Principal, Id) ?? new Cargo() : new Cargo();
    }

    async Task OnValidSubmit()
    {
        if (Cargo is null) return;
        var result = await CargoService.SaveAsync(Principal, Cargo);
        if (result.Entity is not null)  Cargo = result.Entity;
        ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        await Task.Delay(1000);
        if (PageHistory.CanNavigateBack) PageHistory.NavigateBack();
    }

    async Task OnTopLevelNhmChanged(int id)
    {

        if (id > 0 && id != LastTopLevelId)
            NextLevelNhmCodeItems = await CargoService.GetNhmItems(Principal, id);
        LastTopLevelId = id;
        //StateHasChanged();
    }


}
