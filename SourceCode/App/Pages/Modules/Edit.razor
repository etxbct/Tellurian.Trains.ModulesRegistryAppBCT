@page "/Modules/{id:int}/Edit/PersonOwned/{ownerPersonId:int}"
@page "/Modules/{id:int}/Edit/GroupOwned/{ownerGroupId:int}"

@using System.Diagnostics.CodeAnalysis
@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject PersonService PersonService
@inject GroupService GroupService
@inject ModuleService ModuleService
@inject ScaleService ScaleService
@inject ModuleStandardService ModuleStandardService

<EditHeading ObjectName="Module" Owner="@Owner" IconClass="@FontAwesome.Module" IsAdd="@(Id == 0)" HelpContext="Module" />

@if (Module is null)
{

}
else
{
    <EditTemplate Item="Module" OnValidSubmit="OnValidSubmit">
        <Inputs>
            <AppInputSelect Width="2" Label="Scale" @bind-Value="Module.ScaleId" Items="ScaleItems" ShowPleaseSelect="true" />
            <AppInputSelect Width="2" Label="Standard" @bind-Value="Module.StandardId" Items="ModuleStandardItems" ShowPleaseSelect="true" />
            <AppInputText Width="3" Label="Name" @bind-Value="Module.FullName" />
            <AppInputText Width="1" Label="ConfigurationLabel" @bind-Value="Module.ConfigurationLabel" IsDisabled="Module.PackageLabel.HasValue()" />
            <AppInputText Width="1" Label="PackageLabel" @bind-Value="Module.PackageLabel" IsDisabled="Module.ConfigurationLabel.HasValue()" />
            <AppInputNumber Width="1" Label="FremoNumber" @bind-Value="Module.FremoNumber" />
            <AppInputNumber Width="2" Label="NumberOfSections" @bind-Value="Module.NumberOfSections" />

            <AppInputSelect Width="2" Label="Visibility" @bind-Value="Module.ObjectVisibilityId" Items="EnumExtensions.ObjectVisibilityListboxItems()" ShowPleaseSelect="false" />
            <AppInputSelect Width="2" Label="FunctionalState" @bind-Value="Module.FunctionalState" Items="EnumExtensions.ModuleFunctionalStateListboxItems()" ShowPleaseSelect="true" />
            <AppInputSelect Width="2" Label="LandscapeState" @bind-Value="Module.LandscapeState" Items="EnumExtensions.ModuleLandscapeStateListboxItems()" ShowPleaseSelect="true" />
            <AppInputSelect Width="2" Label="SignalFeature" @bind-Value="Module.SignalFeature" Items="EnumExtensions.SignalFeatureListboxItems()" ShowPleaseSelect="false" />
            <AppInputSelect Width="2" Label="OverheadLineFeature" @bind-Value="Module.OverheadLineFeature" Items="EnumExtensions.OverheadLineFeatureListboxItems()" ShowPleaseSelect="false" />

            <AppInputText Width="8" Label="ThemeNote" @bind-Value="Module.Theme" />
            <AppInputNumber Width="2" Label="RepresentsFromYear" @bind-Value="Module.RepresentsFromYear" />
            <AppInputNumber Width="2" Label="RepresentsToYear" @bind-Value="Module.RepresentsUptoYear" />

            <AppInputNumber Width="1" Label="Radius" @bind-Value="Module.Radius" Unit="mm" />
            <AppInputNumber Width="1" Label="Angle" @bind-Value="Module.Angle" Unit="°" />
            <AppInputNumber Width="2" Label="Length" @bind-Value="Module.Length" Unit="mm" Step="1" />
            <AppInputNumber Width="2" Label="MaxSpeed" @bind-Value="Module.SpeedLimit" Unit="km/h" Step="5" />
            <AppInputNumber Width="2" Label="NumberOfThroughTracks" @bind-Value="Module.NumberOfThroughTracks" />
            <AppInputFill Width="4" />

            <AppInputCheck Width="2" Label="IsUnavailable" @bind-Value="Module.IsUnavailable" />
            <AppInputCheck Width="2" Label="IsTurntable" @bind-Value="Module.IsTurntable" />
            <AppInputCheck Width="2" Label="IsDuckunder" @bind-Value="Module.IsDuckunder" />
            <AppInputCheck Width="2" Label="HasIntegratedLocoNet" @bind-Value="Module.IsDuckunder" />
            <AppInputCheck Width="2" Label="HasNormalGauge" @bind-Value="Module.HasNormalGauge" />
            <AppInputCheck Width="2" Label="HasNarrowGauge" @bind-Value="Module.HasNarrowGauge" />

            <AppInputCheck Width="2" Label="Is2R" @bind-Value="Module.Is2R" IsVisible="Show2RAnd3R" />
            <AppInputCheck Width="2" Label="Is3R" @bind-Value="Module.Is3R" IsVisible="Show2RAnd3R" />

            <AppInputText Width="12" Label="Note" @bind-Value="Module.Note" />

            <ModuleExitsEdit Module="Module" />
        </Inputs>
        <Buttons>
            @if (Module.StationId.HasValue)
                {
                <a class="btn btn-secondary btn-sm" href="@StationEditLink"><span class="fa fa-school" />@Localizer.EditObject("Station")</a>
                }
        </Buttons>
    </EditTemplate>

    <DocumentsUpload DocumentedObject="Module">
        <Uploads>
            <DocumentUpload FileExtension="pdf" DocumentedObject="Module" Label="Documentation" MaxFileSizeKb="250" />
            <DocumentUpload FileExtension="dwg" DocumentedObject="Module" Label="Drawing" MaxFileSizeKb="250" />
            @if (Principal is not null && Principal.UserId() == 1)
            {
                <DocumentUpload FileExtension="skp" DocumentedObject="Module" Label="Drawing" MaxFileSizeKb="2000" />
            }
        </Uploads>
    </DocumentsUpload>
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public int OwnerGroupId { get; set; }
    [Parameter] public int OwnerPersonId { get; set; }
    ClaimsPrincipal? Principal;
    Person? OwningPerson;
    Group? OwningGroup;
    Module? Module;
    IEnumerable<ListboxItem>? ScaleItems;
    IEnumerable<ListboxItem>? ModuleStandardItems;

    int? ScaleIdFor3R;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (Principal is not null)
        {
            if (OwnerPersonId > 0) OwningPerson = await PersonService.FindByIdAsync(Principal, OwnerPersonId);
            if (OwnerGroupId > 0) OwningGroup = await GroupService.FindByIdAsync(Principal, OwnerGroupId);
            ScaleItems = await ScaleService.ListboxItemsAsync(Principal);
            ScaleIdFor3R = ScaleItems.SingleOrDefault(i => i.Description.Contains("H0"))?.Id;
            ModuleStandardItems = await ModuleStandardService.ListboxItemsAsync(Principal);
            Module = Id > 0 ? await ModuleService.FindByIdAsync(Principal, Id, OwnerRef) : new Module() { Is2R = true, HasNormalGauge = true, NumberOfThroughTracks = 1, Length = 1000, ObjectVisibilityId=(int)ObjectVisibility.GroupMembers };
        }
    }

    private async Task OnValidSubmit()
    {
        if (Module is not null)
        {
            Module.ModuleExits = Module.ModuleExits.Where(mg => mg.GablePropertyId > 0 && mg.Label.Length > 0).ToList(); // Fix because validation not works as expected.
            var result = await ModuleService.SaveAsync(Principal, Module, OwnerRef);
            Module = result.Entity;
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }
    object? Owner => OwningGroup is not null ? OwningGroup : OwningPerson;
    private string Heading => Localizer.AddOrEdit("Module", OwningGroup is null ? OwningPerson : OwningGroup, Id == 0);

    bool HasStation([NotNullWhen(true)] Module? module) => module is not null && module.StationId.HasValue;

    bool Show2RAnd3R => Module is not null && (ScaleIdFor3R is null || ScaleIdFor3R == Module.ScaleId);


    private ModuleOwnershipRef OwnerRef => OwnerGroupId > 0 ? ModuleOwnershipRef.Group(OwnerGroupId) : OwnerPersonId > 0 ? ModuleOwnershipRef.Person(OwnerPersonId) : Principal.AsModuleOwnershipRef();

    string StationEditLink => HasStation(Module) ?
        OwnerRef.IsPersonInGroup ?
        $"Stations/{Module.StationId}/Edit/PersonOwned/{OwnerRef.PersonId}" :
        OwnerRef.IsGroup ? $"Stations/{Module.StationId}/Edit/GroupOwned/{OwnerRef.GroupId}" :
        $"Stations/{Module.StationId}/Edit/PersonOwned/{OwnerRef.PersonId}" :
        "";
}
