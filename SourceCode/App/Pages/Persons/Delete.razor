@page "/Persons/Delete/{id:int}"
@attribute [Authorize(Policy = "Admin")]
@inject NavigationManager Navigation
@inject IStringLocalizer<App> Localizer
@inject IPersonService PersonService

<h1>@Localizer["Delete"]?</h1>
<ConfirmationMessage ResourceKey="@Message"/>
@if (Person is null)
{

}
else
{
<div>
    @Person.FirstName @Person.LastName, @Person.CityName
</div>
}

<button class="btn btn-danger" @onclick="OnDelete">@Localizer["Delete"]</button>
@code {
    [CascadingParameter]    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int? Id { get; set; }
    private ClaimsPrincipal? Principal;

    private Person? Person;
    private string? Message;

    protected async override Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (Id.IsNotSet()) return;
        Person = await PersonService.FindByIdAsync(Principal, Id.Value);
    }


    private async Task OnDelete()
    {
        if (Id.IsNotSet()) return;
        var result = await PersonService.DeleteAsync(Principal, Id.Value);
        Message = result.Message;
        StateHasChanged();
        if (result.Count > 0)
        {
            await Task.Delay(3000);
            Navigation.NavigateTo("/Persons/Index");
        }

    }
}
