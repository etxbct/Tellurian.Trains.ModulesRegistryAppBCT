@using System.Security.Claims

@page "/Persons"
@page "/Persons/Country/{countryId:int}"

@attribute [Authorize(Policy = "Admin")]

@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator

@inject PersonService PersonService
@inject CountryService CountryService

<PageHeading ObjectName="ModuleOwners" IconClass="@FontAwesome.People" PageAction="@PageAction.List" />

<ListboxSelector OnSelected="OnSelectedCountry" Items="Countries" ItemType="Country" IsVisible="IsSelectCountryVisible" InitialSelectedId=CountryId  />

@if (CountryId > 0)
{
    <div class="col-12">
        <AppButton Href=@AddHref(CountryId) Label="Add" />
    </div>
}

<TableTemplate Items="People" HideNoRecordsToDisplay="true">
    <TableHeader>
        <th>@Localizer["Name"]</th>
        <th>@Localizer["City"]</th>
        <th colspan="2" align="center">@Localizer["Status"]</th>
        <th>@Localizer["Actions"]</th>
    </TableHeader>
    <RowTemplate Context="person">
        <td>@person.Name()</td>
        <td>@person.CityName</td>
        <td align="center"><span>@person.StatusIcon()</span></td>
        <td>
            <UserStatusView User="person.User"></UserStatusView>
        </td>
        <td style="white-space: nowrap !important;">
            @if (Principal.IsAuthorisedInCountry(person.CountryId))
            {
                <AppButton Href="@EditHref(person)" Label="Edit" />
                <AppButton Href="@ModulesHref(person)" Label="Modules" />
                <AppButton Href="@StationsHref(person)" Label="Stations"/>
                @if (person.MayBeInvited())
                {
                    <AppButton Href="@InviteHref(person)" Label="Invite" />
                }
                @if (person.User is null)
                {
                    <AppButton Href="@DeleteHref(person)" Label="Delete" />
                }
                else if (person.User.IsLockedOut())
                {
                    <AppButton  Label="Reset" IsDisabled=true />
                }
            }
        </td>

    </RowTemplate>
</TableTemplate>


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int CountryId { get; set; }
    private ClaimsPrincipal? Principal;
    private IEnumerable<Person>? People = Array.Empty<Person>();
    private IEnumerable<ListboxItem>? Countries;

    private void OnSelectedCountry(int id)
    {
        if (id > 0)
        {
            Navigator.NavigateTo($"/Persons/Country/{id}");
        }
    }

    protected async override Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Countries = await CountryService.ListboxItemsAsync(Principal);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CountryId < 1)
        {
            var id = Principal.CountryId();
            Navigator.NavigateTo($"/Persons/Country/{id}");
        }
        else
        {
            People = await PersonService.GetAllInCountryAsync(Principal, CountryId);
        }
    }

    private bool IsSelectCountryVisible => Countries is not null && Countries.Count() > 1;

    string AddHref(int countryId) => countryId > 0 ? $"persons/0/edit/{countryId}" : string.Empty;
    string EditHref(Person person) => $"persons/{person.Id}/edit";
    string ModulesHref(Person person) => $"persons/{person.Id}/modules";
    string StationsHref(Person person) => $"persons/{person.Id}/stations";
    string InviteHref(Person person) => $"persons/{person.Id}/stations";
    string DeleteHref(Person person) => $"persons/{person.Id}/delete";
}
