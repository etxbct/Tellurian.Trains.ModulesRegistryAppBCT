@using System.Security.Claims
@page "/Persons/Index"
@attribute [Authorize(Policy = "Admin")]
@inject IStringLocalizer<App> Localizer
@inject IPersonService PersonService
@inject ICountryService CountryService
@preservewhitespace true

<h1><span class="fa fa-user-friends" aria-hidden="true" /> @Localizer["ModuleOwners"]</h1>
<ListboxSelector OnSelected="OnSelectedCountry" Items="Countries" ItemType="Country" IsVisible="IsSelectCountryVisible" />

@if (People is null)
{
    @if (IsLoading)@Localizer["GettingData"];
}
else
{
    <a class="btn btn-sm btn-secondary" href="persons/edit/0">@Localizer["Add"]</a>
    <table class="table table-sm table-striped">
        <thead>
            <tr>
                <th>@Localizer["Name"]</th>
                <th>@Localizer["City"]</th>
                <th style="text-align: center">@Localizer["IsUser"]</th>
                <th>@Localizer["Actions"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in People)
            {
                <tr>
                    <td>@Name(person)</td>
                    <td>@person.CityName</td>
                    <td style="text-align: center">@UserStatus(person)</td>
                    <td style="white-space: nowrap !important;">
                        @if (Principal.IsAuthorisedInCountry(person.CountryId))
                        {
                            <a class="btn btn-sm btn-primary" href="persons/@person.Id/edit"><span class="fa fa-edit"/>@Localizer["Edit"]</a>
                            <a class="btn btn-sm btn-info" href="persons/@person.Id/modules"><span class="fa fa-list"/>@Localizer["Modules"]</a>
                            @if (person.User is null || person.User.HashedPassword.HasNoValue())
                            {
                                <a class="btn btn-sm btn-secondary" href="persons/@person.Id/invite"><span class="fa fa-envelope"/>@Localizer["Invite"]</a>
                            }
                            @if (person.UserId is null)
                            {
                                <a class="btn btn-sm btn-danger" href="persons/@person.Id/delete"><span class="fa fa-trash" />@Localizer["Delete"]</a>
                            }
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    private IEnumerable<Person>? People;
    private IEnumerable<ListboxItem>? Countries;
    private bool IsLoading;
    private ClaimsPrincipal? Principal;

    private async Task OnSelectedCountry(int id)
    {
        await GetPersons(id);
    }

    protected async override Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Countries = await CountryService.ListboxItemsAsync(Principal);
        if (Countries.Count() == 1) await GetPersons(Countries.First().Id);
    }

    private async Task GetPersons(int id)
    {
        if (id > 0)
        {
            IsLoading = true;
            StateHasChanged();
            People = await PersonService.GetAllInCountryAsync(Principal, id);
            IsLoading = false;
        }
    }

    private bool IsSelectCountryVisible => Countries is not null && Countries.Count() > 1;
    private string? UserStatus(Person person) =>
        person.User is null ? Localizer["No"] :
        person.User.HashedPassword.HasNoValue() ? Localizer["Invited"] :
        person.User.LastSignInTime.HasValue ? string.Format(LanguageService.CurrentCulture, "{0:g}", person.User.LastSignInTime) :
        Localizer["Yes"];

    private string Name(Person person) => person.MiddleName.HasNoValue() ? $"{person.FirstName} {person.LastName}" : $"{person.FirstName} {person.MiddleName} {person.LastName}";
}
