@using System.Security.Claims

@page "/Persons"
@page "/Persons/Country/{countryId:int}"

@attribute [Authorize(Policy = "Admin")]

@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator

@inject PersonService PersonService
@inject CountryService CountryService

<PageHeading ObjectName="ModuleOwners" IconClass="@FontAwesome.People" PageAction="@PageAction.List" />

<ListboxSelector OnSelected="OnSelectedCountry" Items="Countries" ItemType="Country" IsVisible="IsSelectCountryVisible" />

@if (CountryId > 0)
{
    <div class="col-12">
        <a class="btn btn-secondary btn-sm" href="persons/0/edit/@CountryId"><span class="@FontAwesome.Add" /> @Localizer["Add"]</a>
    </div>
}

<TableTemplate Items="People" HideNoRecordsToDisplay="true">
    <TableHeader>
        <th>@Localizer["Name"]</th>
        <th>@Localizer["City"]</th>
        <th>@Localizer["Actions"]</th>
        <th colspan="2" align="center">@Localizer["Status"]</th>
    </TableHeader>
    <RowTemplate Context="person">
        <td>@person.Name()</td>
        <td>@person.CityName</td>
        <td style="white-space: nowrap !important;">
            @if (Principal.IsAuthorisedInCountry(person.CountryId))
            {
                <a class="btn btn-sm btn-primary" href="persons/@person.Id/edit"><span class="@FontAwesome.Edit" />@Localizer["Edit"]</a>
                <a class="btn btn-sm btn-info" href="persons/@person.Id/modules"><span class="@FontAwesome.Modules" />@Localizer["Modules"]</a>
                <a class="btn btn-sm btn-info" href="persons/@person.Id/stations"><span class="@FontAwesome.Station" />@Localizer["Stations"]</a>
                @if (person.MayBeInvited())
                {
                    <a class="btn btn-sm btn-secondary" href="persons/@person.Id/invite"><span class="@FontAwesome.Invite" />@Localizer["Invite"]</a>
                }
                @if (person.UserId is null)
                {
                    <a class="btn btn-sm btn-danger" href="persons/@person.Id/delete"><span class="@FontAwesome.Delete" />@Localizer["Delete"]</a>
                }
            }
        </td>
        <td align="center"><span>@person.StatusIcon()</span></td>
        <td>
            <UserStatusView User="person.User"></UserStatusView>
        </td>
    </RowTemplate>
</TableTemplate>


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int CountryId { get; set; }
    private ClaimsPrincipal? Principal;
    private IEnumerable<Person>? People = Array.Empty<Person>();
    private IEnumerable<ListboxItem>? Countries;

    private void OnSelectedCountry(int id)
    {
        if (id > 0)
        {
            Navigator.NavigateTo($"/Persons/Country/{id}");
        }
    }

    protected async override Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Countries = await CountryService.ListboxItemsAsync(Principal);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CountryId < 1)
        {
            var id = Principal.CountryId();
            Navigator.NavigateTo($"/Persons/Country/{id}");
        }
        else
        {
            People = await PersonService.GetAllInCountryAsync(Principal, CountryId);
        }
    }

    private bool IsSelectCountryVisible => Countries is not null && Countries.Count() > 1;
}
