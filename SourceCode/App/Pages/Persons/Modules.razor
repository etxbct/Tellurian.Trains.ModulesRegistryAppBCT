@page "/Persons/{id:int}/Modules"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer

@inject PersonService PersonService
@inject ModuleService ModuleService
@inject GroupService GroupService

@preservewhitespace true

<h1><span class="fa fa-boxes" /> @Localizer.ObjectOwnerByOwner("Modules", Owner)</h1>

<ModulesList Modules="OwnedModules" MayEdit="MayEdit" OwningPersonId="OwningPersonId" Principal="Principal"/>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    private ClaimsPrincipal? Principal;
    private Person? Owner;
    private IEnumerable<Module>? OwnedModules;
    bool IsDataAdministratorInSameGroupAsMember;

    protected async override Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Owner = await PersonService.FindByIdAsync(Principal, Id);
        OwnedModules = Owner is null ? Array.Empty<Module>() : await ModuleService.GetAllAsync(Principal, OwnerRef);
        if (Id > 0) IsDataAdministratorInSameGroupAsMember = await GroupService.IsDataAdministratorInSameGroupAsMember(Principal, Id);
    }

    private int OwningPersonId => Owner?.Id ?? 0;
    private bool MayEdit => Principal.MaySave(OwnerRef) || IsDataAdministratorInSameGroupAsMember;
    private ModuleOwnershipRef OwnerRef => ModuleOwnershipRef.Person(OwningPersonId);
}
