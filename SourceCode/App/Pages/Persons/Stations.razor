@page "/Persons/{id:int}/Stations"
@page "/Persons/{id:int}/Stations/Group/{groupId:int}"

@inject IStringLocalizer<App> Localizer

@inject PersonService PersonService
@inject StationService StationService
@inject GroupService GroupService

<PageHeading ObjectName="Stations" Owner="Owner" IconClass="@FontAwesome.Station" PageAction="PageAction.List"/>

<StationsList Stations="OwnedStations" OwningPersonId="OwningPersonId" MayEdit="MayEdit" AnyModules="true" />

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int GroupId { get; set; }
    [Parameter] public int Id { get; set; }
    private ClaimsPrincipal? Principal;
    private Person? Owner;
    private IEnumerable<Station>? OwnedStations;
    bool MayEdit;

    protected async override Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Owner = await PersonService.FindByIdAsync(Principal, Id);
        var ownershipRef = ModuleOwnershipRef.PersonOrGroup(Principal, OwningPersonId, GroupId);
        MayEdit = await Principal.MayEdit(ownershipRef, GroupService);
        OwnedStations = Owner is null ? Array.Empty<Station>() : await StationService.GetAllAsync(Principal, ownershipRef);
    }

    private int OwningPersonId => Owner?.Id ?? 0;
}
