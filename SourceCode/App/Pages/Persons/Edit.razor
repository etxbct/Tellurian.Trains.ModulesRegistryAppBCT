@page "/Persons/Edit/{id:int}"
@attribute [Authorize(Policy = "Admin")]
@inject IStringLocalizer<App> Localizer
@inject IPersonService PersonService
@inject ICountryService CountryService

<h1>@Localizer.AddOrEdit("Person", Id == 0) </h1>
<ConfirmationMessage ResourceKey="@Message" />
@if (Person is null)
{

}
else
{
    <EditForm Model="@Person" OnValidSubmit="@OnValidSumbit">
        <FluentValidationValidator />
        <ValidationSummary />
        <div class="input-group input-group-sm">
            <div class="form-group">
                <label for="firstname">@Localizer["FirstName"]</label>
                <InputText Class="form-control" id="firstname" @bind-Value="@Person.FirstName" />
                <ValidationMessage For="@(() => Person.FirstName)" />
            </div>
            <div class="form-group">
                <label for="middlename">@Localizer["MiddleName"]</label>
                <InputText Class="form-control" id="middlename" @bind-Value="@Person.MiddleName" />
                <ValidationMessage For="@(() => Person.MiddleName)" />
            </div>
            <div class="form-group">
                <label for="lastName">@Localizer["LastName"]</label>
                <InputText Class="form-control" id="lastName" @bind-Value="@Person.LastName" />
                <ValidationMessage For="@(() => Person.LastName)" />
            </div>
        </div>
        <div class="input-group input-group-sm">
            <div class="form-group">
                <label for="cityname">@Localizer["CityName"]</label>
                <InputText Class="form-control" id="lastName" @bind-Value="@Person.CityName" />
                <ValidationMessage For="@(() => Person.CityName)" />
            </div>
            <div class="form-group">
                <label for="countryid">@Localizer["Country"]</label>
                <InputSelect Class="form-control" id="countryid" TValue="int" @bind-Value="@Person.CountryId">
                    <option value="0">@Localizer["SelectCountry"]</option>
                    @if (CountriesItems is not null)
                    {
                        foreach (var item in CountriesItems)
                        {
                            <option value="@item.Id">@item.Description</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Person.CountryId)" />
            </div>
        </div>
        <div class="input-group input-group-lg">
            <div class="form-group">
                <label for="email">@Localizer[nameof(Person.EmailAddresses)]</label>
                <InputText Class="form-control" id="email" @bind-Value="@Person.EmailAddresses" />
                <ValidationMessage For="@(() => Person.EmailAddresses)" />
            </div>
        </div>
        <button type="submit" class="btn btn-primary">@Localizer["Save"]</button>
    </EditForm>
}
@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    [Parameter] public int? Id { get; set; }
    private Person? Person;
    private IEnumerable<ListboxItem>? CountriesItems;
    private string Message = string.Empty;

    protected async override Task OnParametersSetAsync()
    {
        Reset();
        CountriesItems = await CountryService.ListboxItemsAsync(await AuthenticationStateTask.GetClaimsPrincipalAsync());
        Person = await GetOrCreatePersonAsync();
    }

    private async Task OnValidSumbit()
    {
        Reset();
        if (Person is null) return;
        var result = await PersonService.SaveAsync(Person);
        Person = result.Person;
        Message = result.Message;
    }

    private async Task<Person> GetOrCreatePersonAsync() =>
        Id.IsNotSet() ? new Person() : await PersonService.FindAsync(Id.Value) ?? new Person();

    private void Reset()
    {
        Message = string.Empty;
    }

}
