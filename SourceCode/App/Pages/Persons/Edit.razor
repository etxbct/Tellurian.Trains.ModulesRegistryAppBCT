@page "/Persons/{id:int}/Edit"
@page "/Persons/{id:int}/Edit/{countryId:int}"
@page "/Persons/{id:int}/EditGroup/{groupId:int}"

@attribute [Authorize(Policy = "User")]
@inject NavigationManager Navigator
@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject IPersonService PersonService
@inject ICountryService CountryService
@inject IGroupService GroupService

<h1><span class="fa fa-user" /> @Localizer.AddOrEdit("Person", Id == 0) </h1>
@if (Person is null)
{

}
else if (Principal.IsAuthorisedInCountry(Person.CountryId))
{
    <EditForm Model="@Person" OnValidSubmit="@OnValidSumbit" Class="row g-3">
        <FluentValidationValidator />
        <ValidationSummary />
        <AppInputText Width="2" Label="FirstName" @bind-Value="Person.FirstName" />
        <AppInputText Width="2" Label="MiddleName" @bind-Value="Person.MiddleName" />
        <AppInputText Width="2" Label="LastName" @bind-Value="Person.LastName" />
        <AppInputText Width="2" Label="CityName" @bind-Value="Person.CityName" />
        <AppInputSelect Width="2" Label="Country" @bind-Value="Person.CountryId" Items="CountriesItems" ShowPleaseSelect="true" />
        <AppInputText Width="2" Label="FremoPrefix" @bind-Value="Person.FremoOwnerSignature" />

        <AppInputText Width="6" Label="EmailAddresses" @bind-Value="Person.EmailAddresses" />
        <div class="col-12">
            <button type="submit" class="btn btn-primary"><span class="fa fa-save" />@Localizer["Save"]</button>
        </div>
    </EditForm>
}
else
{
    <div class="alert alert-danger">
        @Localizer["NotAuthorized"]
    </div>
}
@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int? Id { get; set; }
    [Parameter] public int CountryId { get; set; }
    [Parameter] public int GroupId { get; set; }
    private Person? Person;
    private IEnumerable<ListboxItem>? CountriesItems;
    private ClaimsPrincipal? Principal;

    protected async override Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        CountriesItems = await CountryService.ListboxItemsAsync(await AuthenticationStateTask.GetClaimsPrincipalAsync());
        Person = await GetOrCreatePersonAsync();
    }

    private async Task OnValidSumbit()
    {
        if (Principal is null || Person is null) return;
        var result = await PersonService.SaveAsync(Principal, Person);
        Person = result.Entity;
        if (IsNotGroupMember)
        {
            var addresult = await GroupService.AddMemberAsync(Principal, new GroupMember { GroupId = GroupId, PersonId = Person!.Id });
        }
        ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        await Task.Delay(3000);
        Navigator.NavigateTo(AfterSaveHref);

    }

    private async Task<Person> GetOrCreatePersonAsync() =>
        Principal is null || Id.IsNotSet() ? DefaultPerson : await PersonService.FindByIdAsync(Principal, Id.Value) ?? DefaultPerson;

    private int DefaultCountryId => CountryId > 0 ? CountryId : Principal is not null ? Principal.CountryId() : CountriesItems is null ? 0 : CountriesItems.Count() == 1 ? CountriesItems.First().Id : 0;
    private Person DefaultPerson => new Person { CountryId = DefaultCountryId };
    private string AfterSaveHref => GroupId > 0 ? $"Groups/{GroupId}/Members" : $"/Persons/Index/{CountryId}";
    private bool IsNotGroupMember => GroupId > 0 && ( Person is null || !Person.GroupMembers.Any(gm => gm.GroupId == GroupId));

}
