@page "/Users/Confirm/"

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject NavigationManager Navigator
@inject UserService UserService

@if (User is null)
{
    <PageHeading Label="UserConfirmationFailed" IconClass="@FontAwesome.User" PageAction="PageAction.Error" />
    @if (EmailAddress is null)
    {
        <p>@Localizer["NoEmailProvided"].</p>
    }
    else
    {
        <p>@Localizer["PasswordResetFailed"].</p>
    }
}
else if (IsPasswordAssigned)
{
    <PageHeading Label="UserConfirmed" IconClass="@FontAwesome.User" PageAction="PageAction.List" />
    <p>@string.Format(Localizer["UserWelcome"].Value, User.Person.FirstName)</p>
    <p>@Localizer["YouMayNowLogin"].</p>
}
else if (User.IsPasswordReset() || User.IsNeverLoggedIn())
{
    <PageHeading Label="CreatePassword" IconClass="@FontAwesome.User" PageAction="PageAction.List" />
    <PasswordPolicyView />
    <EditForm Model="@Password" OnValidSubmit="@OnValidSubmit" Class="row g-3">
        <DataAnnotationsValidator />
        <AppInputText Width="2" Label="Password" @bind-Value="Password.Value" InputType="password" />
        <AppInputText Width="2" Label="ConfirmPassword" @bind-Value="Password.ConfirmValue" InputType="password" />
        <div class="col-12">
            <button type="submit" class="btn btn-primary">@Localizer["Save"]</button>
        </div>
    </EditForm>
}
else if (User.IsLockedOut())
{
    <PageHeading Label="YouAreLockedOut" IconClass="@FontAwesome.User" PageAction="PageAction.Error" />
    <p>@Localizer["You have tried to reset your password to many times."].</p>
}

@code {
    private string? ObjectId;
    private string? EmailAddress;
    private User? User;
    private Password Password = new Password();
    private Services.PasswordPolicy Policy = new PasswordPolicy();
    private bool IsPasswordAssigned;


    protected override async Task OnInitializedAsync()
    {
        IsPasswordAssigned = false;
        var hasObjectId = Navigator.TryGetQueryStringValue<string?>("objectid", out ObjectId);
        var hasEmail = Navigator.TryGetQueryStringValue<string?>("email", out EmailAddress);
        if (hasEmail && hasObjectId)
        {
            User = await UserService.FindOrCreateAsync(EmailAddress, ObjectId);
        }
    }

    private async Task OnValidSubmit()
    {
        if (Password.IsConfirmed)
        {
            User = await UserService.SetPasswordAsync(EmailAddress, ObjectId, Password.Value);
            IsPasswordAssigned = User is not null;
        }
        else
        {
            ToastService.ShowError(Localizer["PasswordConfirmationDoesNotMatch"], Localizer["Error"]);
        }
    }



    private bool HasPassword => User is not null && User.HashedPassword.HasValue();
    private bool PasswordReset => User is not null && User.PasswordResetAttempts > 0;
    private bool IsLockedOut => User is not null && User.PasswordResetAttempts > 3;
}
