@page "/Stations/{stationId:int}/Customers/{id:int}/Waybills"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject PageHistory PageHistory

@inject StationCustomerService StationCustomerService
@inject CargoService CargoService
@inject RegionService RegionService
@inject OperatingDayService OperatingDayService
@inject StationService StationService
@inject StationCustomerWaybillsService WaybillService

<PageHeading Label="Waybills" Owner="Customer" IconClass="@FontAwesome.Customer" PageAction="PageAction.List" />

<div class="col-12" style="border-bottom: 1px solid gray; padding-bottom: 3px">
    <AppButton Label="Add" Href="link to add" />
</div>

@if (Waybills is null)
{
    <ActionMessage Label="LoadingData" />
}
else if (Waybills.IsNullOrEmpty())
{
    <ActionMessage Label="NoRecordsToDisplay" />
}
else
{
    <TableTemplate Items="Waybills">
        <TableHeader>
            <th>@Localizer["Direction"]</th>
            <th>@Localizer["Customer"]</th>
            <th>@Localizer["Region"]</th>
            <th>@Localizer["Cargo"]</th>
            <th>@Localizer["OperatingDay"]</th>
            <th>@Localizer["HasEmptyReturn"]</th>
            <th>@Localizer["PrintCount"]</th>
        </TableHeader>
        <RowTemplate Context="item">
            <td>@item.StationCustomerCargo.Direction.ShortNameLocalized()</td>
            <td>@item.StationCustomerCargo.StationCustomer.CustomerName</td>
            <td style="@item.OtherRegion.Style()">@item.OtherRegion.LocalName</td>
            <td>@item.OtherCustomerCargo.LocalizedName()</td>
            <td>@item.OperatingDay.ShortName</td>
            <td>@item.HasEmptyReturn.AsYesOrNo()</td>
            <td>@item.PrintCount</td>
        </RowTemplate>
        <RowEditTemplate Context="item">
            <CustomerWaybillEdit Waybill="@item" />
        </RowEditTemplate>
    </TableTemplate>
}



@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public int StationId { get; set; }

    ClaimsPrincipal? Principal;
    Station? Station;
    StationCustomer? Customer;

    bool MayEdit;
    IEnumerable<StationCustomerWaybill>? Waybills;

    protected override async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id > 0 && StationId > 0)
        {

            Customer = await StationCustomerService.FindByIdAsync(Principal, Id);
            Waybills = await WaybillService.GetStationCustomerWaybillsAsync(Principal, Id);
        }
    }
}
