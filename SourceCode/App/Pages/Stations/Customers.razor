@page "/Stations/{stationid:int}/Customers"
@page "/Stations/{stationid:int}/Customers/PersonOwned/{owningPersonId:int}"
@page "/Stations/{stationid:int}/Customers/GroupOwned/{owningGroupId:int}"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject GroupService GroupService
@inject CargoService CargoService
@inject OperatingDayService OperatingDayService
@inject StationService StationService
@inject StationCustomerService StationCustomerService

<PageHeading Label="FreightCustomers" Owner="@Station" IconClass="@FontAwesome.Customer" PageAction="PageAction.List" />

@if (MayEdit)
{
    <a class="btn btn-sm btn-secondary" href="@FreightCustomerHref(0)"><span class="@FontAwesome.Add" />@Localizer["Add"]</a>
}
<hr/>
@if (StationCustomers is not null)
{
    @foreach (var customer in StationCustomers.OrderBy(sc => sc.CustomerName))
    {
        <StationCustomerItemView Customer="customer" MayEdit="MayEdit" CargoTypeItems="CargoTypeItems" DirectionItems="DirectionItems" OperatingDayItems="OperatingDayItems" QuantityUnitItems="QuantityUnitItems" ReadyTimeItems="ReadyTimeItems" />
    }
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public int StationId { get; set; }
    [Parameter] public int OwningPersonId { get; set; }
    [Parameter] public int OwningGroupId { get; set; }

    IEnumerable<ListboxItem>? OperatingDayItems;
    IEnumerable<ListboxItem>? CargoTypeItems;
    IEnumerable<ListboxItem>? DirectionItems;
    IEnumerable<ListboxItem>? QuantityUnitItems;
    IEnumerable<ListboxItem>? ReadyTimeItems;


    ClaimsPrincipal? Principal;
    Station? Station;
    IEnumerable<StationCustomer>? StationCustomers;
    bool MayEdit;

    protected override async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        CargoTypeItems = await CargoService.GargoListboxItemsAsync(Principal);
        DirectionItems = await CargoService.CargoDirectionsListboxItemsAsync(Principal);
        OperatingDayItems = await OperatingDayService.AllDaysItemsAsync();
        QuantityUnitItems = await CargoService.CargoQuantityListboxItemsAsync(Principal);
        ReadyTimeItems = await CargoService.ReadyTimeListboxItemsAsync(Principal);

    }

    protected override async Task OnParametersSetAsync()
    {
        if (StationId > 0)
        {
            var ownershipRef = ModuleOwnershipRef.PersonOrGroup(OwningPersonId, OwningGroupId);
            Station = await StationService.FindByIdAsync(Principal, StationId, ownershipRef);
            StationCustomers = await StationCustomerService.AllAsync(Principal, StationId);
            MayEdit = await Principal.MayEdit(ownershipRef, GroupService);
        }
    }

    async Task OnDeleteStationCustomer(int customerId)
    {

        var result = await StationCustomerService.DeleteAsync(Principal, customerId);
        ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        StationCustomers = await StationCustomerService.AllAsync(Principal, StationId);
    }

    string FreightCustomerHref(int customerId) => $"/Stations/{StationId}/Customers/{customerId}/Edit";
}
