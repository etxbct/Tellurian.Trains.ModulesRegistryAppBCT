@page "/Stations/Index"
@page "/Stations/Index/GroupOwned/{owninggroupid:int}"
@page "/Stations/Index/PersonOwned/{owningpersonid:int}"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer

@inject StationService StationService
@inject ModuleService ModuleService

<PageHeading ObjectName="Stations" IconClass="@FontAwesome.Station" PageAction="PageAction.List" />

<StationsList Stations="Stations" MayEdit="MayEdit" AnyModules="AnyModules" OwningGroupId="OwningGroupId" OwningPersonId="OwningPersonId" />

@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }
    [Parameter] public int OwningPersonId { get; set; }
    [Parameter] public int OwningGroupId { get; set; }

    ClaimsPrincipal? Principal;
    IEnumerable<Station>? Stations;
    bool AnyModules;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await authenticationStateTask.GetClaimsPrincipalAsync();
        var ownershipRef = ModuleOwnershipRef.PersonOrGroup(Principal, OwningPersonId, OwningGroupId);
        Stations = await StationService.GetAllAsync(Principal, ownershipRef);
        AnyModules = await ModuleService.HasAnyNonStationAsync(Principal, ownershipRef);
    }

    private bool MayEdit => Principal is not null;
}

