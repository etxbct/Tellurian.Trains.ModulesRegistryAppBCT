@page "/Stations/Index"
@page "/Stations/Index/GroupOwned/{Groupid:int}"
@page "/Stations/Index/PersonOwned/{Personid:int}"
@page "/Stations/Index/PersonOwned/{Personid:int}/InGroup/{Groupid:int}"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer

@inject StationService StationService
@inject ModuleService ModuleService

<PageHeading ObjectName="OperationLocations" IconClass="@FontAwesome.Station" PageAction="PageAction.List" />

<StationsList Stations="Stations" MayEdit="MayEdit" AnyModules="AnyModules" OwningGroupId="OwnershipRef.GroupId" OwningPersonId="OwnershipRef.PersonId" />

@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }
    [Parameter] public int PersonId { get; set; }
    [Parameter] public int GroupId { get; set; }

    ClaimsPrincipal? Principal;
    IEnumerable<Station>? Stations;
    ModuleOwnershipRef OwnershipRef = ModuleOwnershipRef.None;
    bool AnyModules;
    bool MayEdit;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await authenticationStateTask.GetClaimsPrincipalAsync();
        MayEdit = Principal.IsAuthenticated();
        OwnershipRef = ModuleOwnershipRef.Any(Principal, PersonId, GroupId);
        Stations = await StationService.GetAllAsync(Principal, OwnershipRef);
        AnyModules = await ModuleService.HasAnyNonStationAsync(Principal, OwnershipRef);
    }

}

