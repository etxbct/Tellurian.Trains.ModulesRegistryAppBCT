@page "/Stations/{id:int}/Edit"
@page "/Stations/{id:int}/Edit/{ownerid:int}"
@page "/Stations/{id:int}/Edit/PersonOwned/{ownerPersonId:int}"
@page "/Stations/{id:int}/Edit/GroupOwned/{ownerGroupId:int}"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject ModuleService ModuleService
@inject StationService StationService
@inject PersonService PersonService
@inject GroupService GroupService

<EditHeading ObjectName="Station" Owner="@Owner" IconClass="@FontAwesome.Station" IsAdd="@(Id == 0)" HelpContext="Station" />

<EditTemplate Item="Station" OnValidSubmit="OnValidSubmit">
    <Inputs>
        <AppInputSelect Width="3" Label="Module" @bind-Value="ModuleId" Items="ModulesItems" DisplayName="Module" ShowPleaseSelect="true" />
        <AppInputText Width="3" Label="FullName" @bind-Value="Station.FullName" />
        <AppInputText Width="1" Label="Signature" @bind-Value="Station.Signature" />
        <AppInputFill Width="5" />
        <AppInputCheck Width="2" Label="IsTerminus" @bind-Value="Station.IsTerminus" />
        <AppInputCheck Width="2" Label="IsShadowStation" @bind-Value="Station.IsShadow" />
        <StationTracksList Station="Station" />
    </Inputs>
</EditTemplate>

<DocumentsUpload DocumentedObject="Station">
    <Uploads>
        <DocumentUpload FileExtension="pdf" DocumentedObject="Station" Label="OperatingInstructions" MaxFileSizeKb="250" />
    </Uploads>
</DocumentsUpload>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public int OwnerId { get; set; }
    [Parameter] public int OwnerGroupId { get; set; }
    [Parameter] public int OwnerPersonId { get; set; }

    ClaimsPrincipal? Principal;
    object? Owner;
    Station? Station;
    int ModuleId;

    IEnumerable<ListboxItem>? ModulesItems;


    protected override async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        ModulesItems = await ModuleService.ModuleItems(Principal, OwnerRef, Id);
        Station = new Station();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (OwnerRef.IsAny)
        {
            await GetOwner();
        }
        if (Id > 0)
        {
            Station = await StationService.FindByIdAsync(Principal, Id, OwnerRef);
            if (Station is not null) ModuleId = Station.Modules.First().Id;
        }
    }

    private async Task GetOwner() =>
        Owner = OwnerRef.IsGroup ? await GroupService.FindByIdAsync(Principal, OwnerRef.GroupId) : await PersonService.FindByIdAsync(Principal, OwnerRef.PersonId);

    async Task OnValidSubmit()
    {
        if (Station is not null)
        {
            var result = await StationService.SaveAsync(Principal, Station, OwnerRef, ModuleId);
            Station = result.Entity;
            if (Station is not null) ModuleId = Station.Modules.First().Id;
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }
    private string Heading => Localizer.AddOrEdit("Station", Owner, Id == 0 && OwnerId == 0);

    ModuleOwnershipRef OwnerRef => OwnerGroupId > 0 ? ModuleOwnershipRef.Group(OwnerGroupId) : ModuleOwnershipRef.Person(OwnerPersonId > 0 ? OwnerPersonId : OwnerId);

}
