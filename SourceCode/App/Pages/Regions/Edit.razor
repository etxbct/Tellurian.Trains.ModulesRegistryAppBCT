@page "/Regions/{id:int}/Edit"

@attribute [Authorize(Policy = "Admin")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject PageHistory PageHistory

@inject RegionService RegionService
@inject CountryService CountryService

<PageHeading ObjectName="Region" IconClass="@FontAwesome.Region" PageAction="@Id.ToAddOrEditPageAction()" />

<EditTemplate Item="Region" OnValidSubmit="OnValidSubmit" ShowSaveButton="true">
    <Inputs>
        <AppInputSelect Width="2" @bind-Value="Region.CountryId" Items="CountryItems" Label="Country" ShowPleaseSelect="true" />
        <AppInputText Width="3" @bind-Value="Region.LocalName" Label="Name" TextColor="@Region.BackColor.TextColor()" BackColor="@Region.BackColor" />
        <AppInputColor Width="2" @bind-Value="Region.BackColor" Label="BackColor" />
        <AppInputText Width="12" @bind-Value="Region.Description" Label="Description" />
    </Inputs>
    <Buttons>

    </Buttons>
</EditTemplate>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    ClaimsPrincipal? Principal;
    Region Region = new Region();
    IEnumerable<ListboxItem>? CountryItems;

    protected override async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        CountryItems = await CountryService.ListboxItemsAsync(Principal);
    }

    protected override async Task OnParametersSetAsync()
    {
        Region = Id > 0 ? await RegionService.FindById(Principal, Id) ?? Default : Default;
    }

    Region Default => new Region { CountryId = Principal.CountryId() };

    async Task OnValidSubmit()
    {
        if (Region is not null)
        {
            Region.ForeColor = Region.BackColor.TextColor();
            Region.ColourName = Region.ColourName?.ToUpperInvariant();
            var result = await RegionService.SaveAsync(Principal, Region);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
            await Task.Delay(3000);
            PageHistory.NavigateBack();
        }
    }
}
