@page "/Groups/{id:int}/Edit"

@attribute [Authorize(Policy = "Admin")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject GroupService GroupService
@inject CountryService CountryService
@inject GroupCategoryService GroupCategoryService

<PageHeading ObjectName="Group" IconClass="@FontAwesome.Group" PageAction="@Id.ToPageAction()" HelpContext="Group" />

@if (Group is null)
{

}
else
{
<EditForm Model="@Group" OnValidSubmit="@OnValidSumbit" Class="row g-3">
    <FluentValidationValidator />
    <ValidationSummary />

    <AppInputText Width="2" Label="ShortName" @bind-Value="Group.ShortName" />
    <AppInputText Width="4" Label="FullName" @bind-Value="Group.FullName" />
    <AppInputText Width="2" Label="CityName" @bind-Value="Group.CityName" />
    <AppInputSelect Width="2" Label="Country" @bind-Value="Group.CountryId" Items="CountriesItems" ShowPleaseSelect="true" />
    <AppInputFill Width="2" />

    <div class="col-md-2">
        <label class="form-control-label" for="category">@SelectCategoryLabel</label>
        <InputSelect class="form-select" id="category" TValue="string" @bind-Value="@Group.Category">
            <option value="">@Localizer["Select"] </option>
            @foreach (var item in GroupCategories ?? Array.Empty<(string, string)>())
            {
                if (item.Value.Equals(Group.Category))
                {
                    <option selected value="@item.Value">@item.Desciption</option>
                }
                else
                {
                    <option value="@item.Value">@item.Desciption</option>
                }
            }
        </InputSelect>
        <ValidationMessage For="@(() => Group.Category)" />
    </div>
    <AppInputSelectNullable Width="2" Label="Domain" @bind-Value="Group.GroupDomainId" Items="DomainItems" ShowNoneOption="true" />
    <div class="col-12">
        <button type="submit" class="btn btn-primary"><span class="@FontAwesome.Save" aria-hidden="true" /> @Localizer["Save"]</button>
    </div>
</EditForm>
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }

    private ClaimsPrincipal? Principal;
    private Group? Group;
    private IEnumerable<ListboxItem>? CountriesItems;
    private IEnumerable<ListboxItem>? DomainItems;
    private IEnumerable<(string Value, string Desciption)>? GroupCategories;

    protected async override Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        GroupCategories = await GroupCategoryService.AllAsync();
        CountriesItems = await CountryService.ListboxItemsAsync(await AuthenticationStateTask.GetClaimsPrincipalAsync());
        DomainItems = await GroupService.GroupDomainListboxItemsAsync(Principal);
        Group = await GetOrCreateAsync();
    }


    private async Task OnValidSumbit()
    {
        if (Group is null) return;
        var result = await GroupService.SaveAsync(Principal, Group);
        Group = result.Entity;
        ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
    }

    private async Task<Group> GetOrCreateAsync() =>
        Id > 0 ? await GroupService.FindByIdAsync(Principal, Id) ?? NewGroup : NewGroup;
    private Group NewGroup => new Group { CountryId = DefaultCountryId };

    private string SelectCategoryLabel => $"{Localizer["Select"]} {Localizer["Category"].Value.ToLowerInvariant()}";
    private int DefaultCountryId => CountriesItems is null ? 0 : CountriesItems.Count() == 1 ? CountriesItems.First().Id : 0;

}
