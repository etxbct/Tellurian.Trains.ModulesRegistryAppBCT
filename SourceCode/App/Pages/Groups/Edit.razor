@page "/Groups/{id:int}/Edit"
@attribute [Authorize(Policy = "Admin")]
@inject IStringLocalizer<App> Localizer
@inject IToastService Toast
@inject IGroupService GroupService
@inject ICountryService CountryService
@inject IGroupCategoryService GroupCategoryService

<h1><span class="fa fa-user-friends" aria-hidden="true" /> @Localizer.AddOrEdit("Group", Id == 0) </h1>
@if (Group is null)
{

}
else
{
<EditForm Model="@Group" OnValidSubmit="@OnValidSumbit" Class="row g-3">
    <FluentValidationValidator />
    <ValidationSummary />
    <div class="col-md-2">
        <label class="form-label" for="ShortName">@Localizer["ShortName"]</label>
        <InputText Class="form-control" id="ShortName" @bind-Value="@Group.ShortName" />
        <ValidationMessage For="@(() => Group.ShortName)" />
    </div>
    <div class="col-md-4">
        <label class="form-label" for="FullName">@Localizer["FullName"]</label>
        <InputText Class="form-control" id="FullName" @bind-Value="@Group.FullName" />
        <ValidationMessage For="@(() => Group.FullName)" />
    </div>
    <div class="col-md-2">
        <label class="form-label" for="cityname">@Localizer["CityName"]</label>
        <InputText Class="form-control" id="lastName" @bind-Value="@Group.CityName" />
        <ValidationMessage For="@(() => Group.CityName)" />
    </div>
    <div class="col-md-2">
        <label class="form-label" for="countryid">@Localizer["Country"]</label>
        <InputSelect Class="form-select" id="countryid" TValue="int" @bind-Value="@Group.CountryId">
            <option value="0">@Localizer["SelectCountry"]</option>
            @if (CountriesItems is not null)
            {
                foreach (var item in CountriesItems)
                {
                    if (item.Id == Group.CountryId)
                    {
                        <option selected value="@item.Id">@item.Description</option>
                    }
                    else
                    {
                        <option value="@item.Id">@item.Description</option>
                    }
                }
            }
        </InputSelect>
        <ValidationMessage For="@(() => Group.Country)" />
    </div>
    <div class="col-md-2">
        <label class="form-label" for="category">@SelectCategoryLabel</label>
        <InputSelect class="form-select" id="category" TValue="string" @bind-Value="@Group.Category">
            <option value="">@Localizer["Select"] </option>
            @foreach (var item in GroupCategories ?? Array.Empty<(string, string)>())
            {
                if (item.Value.Equals(Group.Category))
                {
                    <option selected value="@item.Value">@item.Desciption</option>
                }
                else
                {
                    <option value="@item.Value">@item.Desciption</option>
                }
            }
        </InputSelect>
        <ValidationMessage For="@(() => Group.Category)" />
    </div>
    <div class="col-12">
        <button type="submit" class="btn btn-primary">@Localizer["Save"]</button>
    </div>
</EditForm>
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int? Id { get; set; }

    private ClaimsPrincipal? Principal;
    private Group? Group;
    private IEnumerable<ListboxItem>? CountriesItems;
    private IEnumerable<(string Value, string Desciption)>? GroupCategories;

    protected async override Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        GroupCategories = await GroupCategoryService.AllAsync();
        CountriesItems = await CountryService.ListboxItemsAsync(await AuthenticationStateTask.GetClaimsPrincipalAsync());
        Group = await GetOrCreateAsync();
    }


    private async Task OnValidSumbit()
    {
        if (Group is null) return;
        var result = await GroupService.SaveAsync(Principal, Group);
        Group = result.Entity;
        Toast.ShowSuccessOrFailure(Localizer, result.Count > 0, result.Message);
    }

    private async Task<Group> GetOrCreateAsync() =>
    Id.IsSet() ? await GroupService.FindByIdAsync(Principal, Id.Value) ?? NewGroup : NewGroup;
    private Group NewGroup => new Group { CountryId = DefaultCountryId };

    private string SelectCategoryLabel => $"{Localizer["Select"]} {Localizer["Category"].Value.ToLowerInvariant()}";
    private int DefaultCountryId => CountriesItems is null ? 0 : CountriesItems.Count() == 1 ? CountriesItems.First().Id : 0;

}
