@page "/Groups/Index"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer

@inject GroupService GroupService
@inject CountryService CountryService

<PageHeading ObjectName="Groups" IconClass="@FontAwesome.Group" PageAction="PageAction.List"/>

<ListboxSelector OnSelected="OnSelectedCountry" Items="Countries" ItemType="@Localizer["Country"]" IsVisible="IsSelectCountryVisible" />

@if (Groups is null)
{
    @if (IsLoading)@Localizer["GettingData"];
}
else
{
    @if (Principal.IsCountryAdministratorInCountry(CountryId))
    {
        <a class="btn btn-sm btn-secondary" href="groups/0/edit"><span class="fa fa-plus-square" /> @Localizer["Add"]</a>
    }
    <table class="table table-striped table-responsive-sm">
        <thead>
            <tr>
                <th>@Localizer["ShortName"]</th>
                <th>@Localizer["FullName"]</th>
                <th>@Localizer["CityName"]</th>
                <th>@Localizer["Domain"]</th>
                <th>@Localizer["Category"]</th>
                <th>@Localizer["Actions"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Groups)
            {
            <tr>
                <td>@item.value.ShortName</td>
                <td>@item.value.FullName</td>
                <td>@item.value.CityName</td>
                <td>@item.value.GroupDomain?.Name</td>
                <td>@Localizer[item.value.Category]</td>
                <td style="white-space: nowrap !important;">
                    @if (item.mayEdit)
                    {
                        <a class="btn btn-sm btn-primary" href="groups/@item.value.Id/edit"><span class="@FontAwesome.Edit" />@Localizer["Edit"]</a>
                    }
                    <a class="btn btn-sm btn-secondary" href="groups/@item.value.Id/members"><span class="@FontAwesome.User" /> @Localizer["Members"]</a>
                    <a class="btn btn-sm btn-info" href="groups/@item.value.Id/modules"><span class="@FontAwesome.Modules" />@Localizer["Modules"]</a>
                    <a class="btn btn-sm btn-info" href="groups/@item.value.Id/stations"><span class="@FontAwesome.Station" />@Localizer["Stations"]</a>
                    @*<a class="btn btn-sm btn-warning" href="groups/@item.Id/delete"><span class="fa fa-trash" />@Localizer["Delete"]</a>*@
                </td>
            </tr>
            }
        </tbody>
    </table>
}
@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private ClaimsPrincipal? Principal;
    private IEnumerable<(Group value, bool mayEdit)>? Groups;
    private IEnumerable<ListboxItem>? Countries;
    private int CountryId;
    private bool IsLoading;

    protected async override Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Countries = await CountryService.ListboxItemsAsync(Principal);
        if (Countries.Count() == 1)
        {
            CountryId = Countries.First().Id;
            await GetGroups(CountryId);
        }
    }

    private async Task OnSelectedCountry(int id)
    {
        CountryId = id;
        await GetGroups(CountryId);
    }

    private async Task GetGroups(int id)
    {
        if (id > 0)
        {
            IsLoading = true;
            StateHasChanged();
            Groups = await GroupService.GetAllAsync(Principal, id);
            IsLoading = false;
        }
    }

    private bool IsSelectCountryVisible => Countries is not null && Countries.Count() > 1;

}
