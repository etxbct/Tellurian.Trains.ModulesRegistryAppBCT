@page "/Groups/Index"
@page "/Groups/Index/{countryId:int}"
@page "/Groups/Country/{countryId:int}"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator
@inject AppService AppService
@inject GroupService GroupService
@inject CountryService CountryService

<PageHeading ObjectName="Groups" IconClass="@FontAwesome.Group" PageAction="PageAction.List" />

<ListboxSelector OnSelected="OnSelectedCountry" Items="Countries" ItemType="@Localizer["Country"]" IsVisible="IsSelectCountryVisible" SelectedId="CountryId" />

@if (Groups is null)
{
    @if (IsLoading) @Localizer["GettingData"]
}
else
{
    @if (Principal.IsCountryAdministratorInCountry(CountryId))
    {
        <AppButton Label="Add" Href="@EditHref(0)"/>
    }
    <table class="table table-striped table-responsive-sm">
        <thead>
            <tr>
                <th>@Localizer["ShortName"]</th>
                <th>@Localizer["FullName"]</th>
                <th>@Localizer["CityName"]</th>
                <th>@Localizer["Domain"]</th>
                <th>@Localizer["Category"]</th>
                <th>@Localizer["Actions"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Groups)
            {
                <tr>
                    <td>@item.value.ShortName</td>
                    <td>@item.value.FullName</td>
                    <td>@CityName(item.value)</td>
                    <td>@item.value.GroupDomain?.Name</td>
                    <td>@Localizer[item.value.Category]</td>
                    <td style="white-space: nowrap !important;">
                        <AppButton Label="Members" Href="@MembersHref(item.value.Id)" IconName="@FontAwesome.User"></AppButton>
                        <AppButton Label="Modules" Href="@ModulesHref(item.value.Id)" IconName="@FontAwesome.Modules"></AppButton>
                        <AppButton Label="Stations" Href="@StationsHref(item.value.Id)" IconName="@FontAwesome.Stations"></AppButton>
                        @*<a class="btn btn-sm btn-warning" href="groups/@item.Id/delete"><span class="fa fa-trash" />@Localizer["Delete"]</a>*@
                        @if (item.mayEdit)
                        {
                            <AppButton Label="Edit" Href="@EditHref(item.value.Id)"></AppButton>
                            <AppButton Label="NewMeeting" Href="@CreateMeetingHref(item.value.Id)" IconName="@FontAwesome.Meeting"></AppButton>
                        }

                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int CountryId { get; set; }

    ClaimsPrincipal? Principal;
    IEnumerable<(Group value, bool mayEdit)>? Groups;
    IEnumerable<ListboxItem>? Countries;
    bool IsLoading;

    protected async override Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Countries = await CountryService.ListboxItemsAsync(Principal);
        if (CountryId == 0)
        {
            CountryId = Principal.CountryId();
            AppService.LastCountryId = CountryId;
            OnSelectedCountry(CountryId);
        }
        else
        {
            AppService.LastCountryId = CountryId;
            await GetGroups(CountryId);
        }
    }

    void OnSelectedCountry(int countryId)
    {
        if (countryId > 0)
        {
            AppService.LastCountryId = countryId;
            Navigator.NavigateTo(IndexHref);
        }
    }

    async Task GetGroups(int countryId)
    {
        if (countryId > 0)
        {
            IsLoading = true;
            StateHasChanged();
            Groups = await GroupService.GetAllAsync(Principal, countryId);
            IsLoading = false;
        }
    }

    bool IsSelectCountryVisible => Countries is not null && Countries.Count() > 1;

    string CityName(Group? group) => group is null ? string.Empty : group.CountryId == CountryId ? group.CityName : $"{group.CityName} ({group.Country.DomainSuffix.ToUpperInvariant()})";
    string EditHref(int groupId) => $"groups/{groupId}/edit";
    string MembersHref(int groupId) => $"groups/{groupId}/members";
    string ModulesHref(int groupId) => $"groups/{groupId}/modules";
    string StationsHref(int groupId) => $"groups/{groupId}/stations";
    string CreateMeetingHref(int groupId) => $"/Meetings/Create/{groupId}";
    string IndexHref => $"Groups/Country/{AppService.LastCountryId}";
}
