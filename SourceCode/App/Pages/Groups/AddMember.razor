@page "/Groups/{groupid:int}/AddMember/"
@attribute [Authorize(Policy = "Admin")]
@inject NavigationManager Navigator
@inject IStringLocalizer<App> Localizer
@inject IGroupService GroupService
@inject IPersonService PersonService

<h3>@Heading</h3>
 

<EditForm Model="@GroupMember" OnValidSubmit="@OnValidSubmit">
    <FluentValidationValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="personid">@Localizer["Person"]</label>
        <BlazoredTypeahead SearchMethod="SearchPersons" @bind-Value="GroupMember.PersonId" ConvertMethod="ConvertPerson" MinimumLength="3" MaximumSuggestions="10" EnableDropDown="true">
            <SelectedTemplate Context="personId">
                @{ 
                    var selectedPerson = SelectedPerson(personId);
                    <text>@selectedPerson?.Description</text>
                }
            </SelectedTemplate>
            <ResultTemplate Context="person">
                @person.Description
            </ResultTemplate>
        </BlazoredTypeahead>
        <ValidationMessage For="@(() => GroupMember.Person)" />
    </div>
    <div class="form-group">
        <label for="groupadmin">@Localizer["IsGroupAdministrator"]</label>
        <InputCheckbox Class="form-check" id="groupadmin" @bind-Value="@GroupMember.IsGroupAdministrator"></InputCheckbox>
    </div>
    <div class="form-group">
        <label for="dataadmin">@Localizer["IsDataAdministrator"]</label>
        <InputCheckbox Class="form-check" id="dataadmin" @bind-Value="@GroupMember.IsDataAdministrator"></InputCheckbox>
    </div>
    <button type="submit" class="btn btn-primary">@Localizer["Save"]</button>

</EditForm>

@code {

    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int? GroupId { get; set; }

    private ClaimsPrincipal? Principal;
    private Group? Group;
    private GroupMember GroupMember = new GroupMember();
    private IEnumerable<ListboxItem>? Persons;

    protected async override Task OnParametersSetAsync()
    {
        await RefreshData();
    }

    protected async Task RefreshData()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (GroupId.IsSet())
        {
            Group = await GroupService.FindAsync(GroupId.Value);
            if (Group is not null)
            {
                Persons = await PersonService.ListboxItemsAsync(Principal, Group.CountryId);
                GroupMember.GroupId = Group.Id;
            }
            // TODO: Filter away persons that already is member in the group.
        }
    }

    private async Task<IEnumerable<ListboxItem>> SearchPersons(string searchText)
    {
        return await Task.FromResult<IEnumerable<ListboxItem>>(Persons is null ? Array.Empty<ListboxItem>() :
        Persons.Where(p => p.Description.ToLowerInvariant().StartsWith(searchText.ToLowerInvariant())).ToList());
    }
    private int ConvertPerson(ListboxItem person) => person.Id;
    private ListboxItem? SelectedPerson(int? id) => id is null ? null : Persons?.FirstOrDefault(p => p.Id == id.Value);

    private async Task OnValidSubmit()
    {
        var result = await GroupService.AddMemberAsync(GroupMember);
        if (result.Count > 0) Navigator.NavigateTo($"/Groups/{GroupMember.GroupId}/Members");
    }

    private string Heading => Localizer["AddMemberIn"] + " " + Group?.FullName;

}
