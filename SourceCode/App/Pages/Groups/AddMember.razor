@page "/Groups/{groupid:int}/members/add"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject NavigationManager Navigator
@inject GroupService GroupService
@inject PersonService PersonService

<PageHeading Label="AddMemberIn" Owner="Group" IconClass="@FontAwesome.Group" PageAction="PageAction.Add"/>

@if (MayEdit)
{
    <EditForm Model="@GroupMember" OnValidSubmit="@OnValidSubmit" Class="row g-3">
        <FluentValidationValidator />
        <ValidationSummary />
        <div class="col-md-2">
            <label class="form-control-label" for="personid">@SearchLabel</label>
            <BlazoredTypeahead SearchMethod="SearchPersons" @bind-Value="GroupMember.PersonId" ConvertMethod="ConvertPerson" MinimumLength="3" MaximumSuggestions="10" EnableDropDown="true" Class="form-select">
                <SelectedTemplate Context="personId">
                    @{
                            var selectedPerson = SelectedPerson(personId);
                        <text>@selectedPerson?.Description</text>
                    }
                </SelectedTemplate>
                <ResultTemplate Context="person">
                    @person.Description
                </ResultTemplate>
                <NotFoundTemplate>
                    <div>
                        <span>
                            @Localizer["NotFound"]
                            <a class="btn btn-link" href="persons/0/editgroup/@GroupId">@Localizer["Add"]</a>
                        </span>
                    </div>
                </NotFoundTemplate>
            </BlazoredTypeahead>
            <ValidationMessage For="@(() => GroupMember.Person)" />
        </div>
        <AppInputFill Width="10" />
        <AppInputCheck Width="2" Label="IsGroupAdministrator" @bind-Value="GroupMember.IsGroupAdministrator" />
        <AppInputCheck Width="2" Label="IsDataAdministrator" @bind-Value="GroupMember.IsDataAdministrator" />
        <div class="col-12">
            <button type="submit" class="btn btn-sm btn-primary"><span class="@FontAwesome.Save" aria-hidden="true" />@Localizer["Save"]</button>
        </div>
    </EditForm>
}
else
{
    <ActionMessage Label="NotAuthorised" />
}
@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int? GroupId { get; set; }

    ClaimsPrincipal? Principal;
    Group? Group;
    GroupMember GroupMember = new GroupMember();
    IEnumerable<ListboxItem>? Persons;
    bool MayEdit;

    protected override async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        MayEdit = GroupId.HasValue ? await GroupService.IsGroupDataAdministratorAsync(Principal, GroupId.Value) : false;
        await RefreshData();
    }

    protected async Task RefreshData()
    {
        if (GroupId.IsSet())
        {
            Group = await GroupService.FindByIdAsync(Principal, GroupId.Value);
            if (Group is not null)
            {
                Persons = await PersonService.ListboxItemsAsync(Principal, Group.CountryId);
                GroupMember.GroupId = Group.Id;
            }
            // TODO: Filter away persons that already is member in the group.
        }
    }

    async Task<IEnumerable<ListboxItem>> SearchPersons(string searchText)
    {
        return await Task.FromResult<IEnumerable<ListboxItem>>(Persons is null ? Array.Empty<ListboxItem>() :
        Persons.Where(p => !p.IsHidden && p.Description.ToLowerInvariant().Contains(searchText.ToLowerInvariant())).ToList());
    }

    async Task OnValidSubmit()
    {
        var result = await GroupService.AddMemberAsync(Principal, GroupMember);
        ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        await Task.Delay(3000);
        if (result.Count > 0) Navigator.NavigateTo($"/Groups/{GroupMember.GroupId}/Members");
    }

    string SearchLabel => Localizer.SearchObject("Person");
    int ConvertPerson(ListboxItem person) => person.Id;
    ListboxItem? SelectedPerson(int? id) => id is null ? null : Persons?.FirstOrDefault(p => p.Id == id.Value);
}
