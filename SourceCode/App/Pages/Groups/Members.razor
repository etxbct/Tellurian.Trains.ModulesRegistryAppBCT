@page "/Groups/{groupid:int}/Members"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject GroupService GroupService
@inject CountryService CountryService

<PageHeading Label="MembersIn" Owner="Group" IconClass="@FontAwesome.Group" PageAction="PageAction.List" />

@if (IsGroupAdministrator && Group?.Id > 0)
{
    <a class="btn btn-sm btn-secondary" href="groups/@Group.Id/members/add"><span class="@FontAwesome.Add" />@Localizer["Add"]</a>
}

<TableTemplate Items="Group?.GroupMembers">
    <TableHeader>
        <th>@Localizer["Name"]</th>
        <th>@Localizer["IsGroupAdministrator"]</th>
        <th>@Localizer["IsDataAdministrator"]</th>
        <th>@Localizer["IsInvited"]</th>
        <th>@Localizer["Actions"]</th>

    </TableHeader>
    <RowTemplate Context="member">
        <td>@member.Person.Name()</td>
        <td>@member.IsGroupAdministrator.AsYesNo()</td>
        <td>@member.IsDataAdministrator.AsYesNo()</td>
        <td>@member.Person.IsInvited().AsYes()</td>
        <td style="white-space: nowrap !important;">
            @if (IsGroupAdministrator)
            {
                <a class="btn btn-sm btn-primary" href="groups/@member.GroupId/members/@member.Id/edit"><span class="@FontAwesome.Edit" />@Localizer["Edit"]</a>
            }
            <a class="btn btn-sm btn-secondary" href="persons/@member.PersonId/modules/group/@Group.Id"><span class="@FontAwesome.Modules" />@Localizer["Modules"]</a>
            <a class="btn btn-sm btn-secondary" href="persons/@member.PersonId/stations/group/@Group.Id"><span class="@FontAwesome.Station" />@Localizer["Stations"]</a>
            @if (IsGroupAdministrator)
            {
                <button class="btn btn-sm btn-danger" @onclick="(async () => await RemoveMember(member.Id))"><span class="fa fa-trash" />@Localizer["Remove"]</button>
                @if (member.Person.MayBeInvited())
                {
                    <a class="btn btn-sm btn-success" href="persons/@member.Person.Id/invite"><span class="@FontAwesome.Invite" />@Localizer["Invite"]</a>
                }
            }
        </td>
    </RowTemplate>
</TableTemplate>


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int? GroupId { get; set; }

    private ClaimsPrincipal? Principal;
    private Group? Group;
    private bool IsGroupAdministrator;

    protected async override Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (GroupId.IsSet())
        {
            Group = await GroupService.FindByIdAsync(Principal, GroupId.Value);
            IsGroupAdministrator = await GroupService.IsGroupMemberAdministratorAsync(Principal, GroupId.Value);
        }
    }

    async Task RemoveMember(int membershipId)
    {
        if (membershipId > 0)
        {
            var result = await GroupService.RemoveMemberAsync(Principal, membershipId);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
            if (GroupId.IsSet()) Group = await GroupService.FindByIdAsync(Principal, GroupId.Value);
        }
    }

    private string Heading => Localizer["MembersIn"] + " " + Group?.FullName;
}
