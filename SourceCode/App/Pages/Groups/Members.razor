@page "/Groups/{groupid:int}/Members"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer

@inject GroupService GroupService
@inject CountryService CountryService

<h1><span class="@FontAwesome.Group" aria-hidden="true" /> @Heading</h1>
@if (Group is null)
{

}
else
{
    <a class="btn btn-sm btn-secondary" href="groups/@Group.Id/members/add"><span class="@FontAwesome.Add" />@Localizer["Add"]</a>
    <table class="table table-sm table-striped">
        <thead>
            <tr>
                <th>@Localizer["Name"]</th>
                <th>@Localizer["IsGroupAdministrator"]</th>
                <th>@Localizer["IsDataAdministrator"]</th>
                <th>@Localizer["IsInvited"]</th>
                <th>@Localizer["Actions"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Group.GroupMembers)
            {
                <tr>
                    <td>@item.Person.Name()</td>
                    <td>@item.IsGroupAdministrator.AsYesNo()</td>
                    <td>@item.IsDataAdministrator.AsYesNo()</td>
                    <td>@item.Person.IsInvited().AsYes()</td>
                    <td style="white-space: nowrap !important;">
                        <a class="btn btn-sm btn-primary" href="groups/@item.GroupId/members/@item.Id/edit"><span class="@FontAwesome.Edit" />@Localizer["Edit"]</a>
                        <a class="btn btn-sm btn-secondary" href="persons/@item.PersonId/modules"><span class="@FontAwesome.Modules" />@Localizer["Modules"]</a>
                        <a class="btn btn-sm btn-secondary" href="persons/@item.PersonId/stations"><span class="@FontAwesome.Station" />@Localizer["Stations"]</a>
                        @if (item.Person.MayBeInvited())
                        {
                            <a class="btn btn-sm btn-success" href="persons/@item.Person.Id/invite"><span class="@FontAwesome.Invite" />@Localizer["Invite"]</a>
                        }
                        @*<a class="btn btn-sm btn-warning" href="groups/@item.GroupId/members/@item.Id/remove"><span class="fa fa-trash" />@Localizer["Remove"]</a>*@
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int? GroupId { get; set; }

    private ClaimsPrincipal? Principal;
    private Group? Group;

    protected async override Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (GroupId.IsSet())
        {
            Group = await GroupService.FindByIdAsync(Principal, GroupId.Value);
        }
    }

    private string Heading => Localizer["MembersIn"] + " " + Group?.FullName;

}
