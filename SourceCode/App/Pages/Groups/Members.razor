@page "/Groups/{groupid:int}/Members"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject GroupService GroupService
@inject CountryService CountryService

<PageHeading Label="MembersIn" Owner="Group" IconClass="@FontAwesome.Group" PageAction="PageAction.List" />

@if (IsGroupAdministrator && Group.Id > 0)
{
    <a class="btn btn-sm btn-secondary" href="groups/@Group.Id/members/add"><span class="@FontAwesome.Add" />@Localizer["Add"]</a>
}

<TableTemplate Items="Group.GroupMembers">
    <TableHeader>
        <th>@Localizer["Name"]</th>
        <th align="center">@Localizer["IsGroupAdministrator"]</th>
        <th align="center">@Localizer["IsDataAdministrator"]</th>
        <th align="center">@Localizer["Status"]</th>
        <th>@Localizer["Actions"]</th>

    </TableHeader>
    <RowTemplate Context="member">
        <td>@member.Person.Name()</td>
        <td align="center">@member.IsGroupAdministrator.AsYesNo()</td>
        <td align="center">@member.IsDataAdministrator.AsYesNo()</td>
        <td align="center">@member.Person.StatusIcon()</td>
        <td style="white-space: nowrap !important;">
            <AppButton Label="Modules" Href="@ModulesHref(member)" IconName="Modules" />
            <AppButton Label="Stations" Href="@StationsHref(member)" IconName="Station" />
            @if (IsGroupAdministrator)
            {
                <AppButton Label="Edit" Href="@MemberEditHref(member)" />
                <AppButton Label="Remove" OnClickCallback="(async () => await RemoveMember(member.Id))" IconName="Delete"/>
                @if (member.Person.MayBeInvited())
                {
                    <AppButton Label="Invite" Href="@InviteHref(member)" IconName="Invite" />
                }
            }
        </td>
    </RowTemplate>
</TableTemplate>


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int? GroupId { get; set; }

    private ClaimsPrincipal? Principal;
    private Group Group = new Group();
    private bool IsGroupAdministrator;

    protected async override Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (GroupId.IsSet())
        {
            Group = await GroupService.FindByIdAsync(Principal, GroupId.Value) ?? new Group();
            IsGroupAdministrator = await GroupService.IsGroupMemberAdministratorAsync(Principal, GroupId.Value, Group?.CountryId);
        }
    }

    async Task RemoveMember(int membershipId)
    {
        if (membershipId > 0)
        {
            var result = await GroupService.RemoveMemberAsync(Principal, membershipId);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
            if (GroupId.IsSet()) Group = await GroupService.FindByIdAsync(Principal, GroupId.Value) ?? new Group();
        }
    }

    string ModulesHref(GroupMember member) => $"persons/{member.PersonId}/modules/group/{member.GroupId}";
    string StationsHref(GroupMember member) => $"persons/{member.PersonId}/stations/group/{member.GroupId}";
    string MemberEditHref(GroupMember member) => $"groups/{member.GroupId}/members/{member.Id}/edit";
    string InviteHref(GroupMember member) => $"persons/{member.PersonId}/invite";
}
