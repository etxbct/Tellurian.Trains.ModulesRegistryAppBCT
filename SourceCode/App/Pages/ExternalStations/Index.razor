@page "/ExternalStations"
@page "/ExternalStations/{regionId:int}"
@page "/ExternalStations/Region/{regionId:int}"
@page "/ExternalStations/Country/{countryId:int}"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator

@inject ExternalStationService ExternalStationService
@inject CountryService CountryService
@inject RegionService RegionService

<PageHeading ObjectName="ExternalStations" Owner="Owner" IconClass="@FontAwesome.Station" PageAction="PageAction.List" HelpContext="ExternalStations" ShowHelpInitially="true" />

<ListboxSelector Items="CountryItems" OnSelected="OnSelectedCountry" IsVisible="CanSelectCountry" />

@if (HasData)
{
    @if (MayEdit)
    {
        <a class="btn btn-primary btn-sm" href="ExternalStations/0/Edit"><span class="@FontAwesome.Add" /> @Localizer["Add"]</a>
    }

    <TableTemplate Items="ExternalStations">
        <TableHeader>
            <th>@Localizer["Name"]</th>
            <th>@Localizer["Signature"]</th>
            <th>@Localizer["Note"]</th>
            <th>@Localizer["OpenedYear"]</th>
            <th>@Localizer["ClosedYear"]</th>
            <th>@Localizer["Actions"]</th>
        </TableHeader>
        <RowTemplate Context="item">
            <td>@item.FullName</td>
            <td>@item.Signature</td>
            <td>@item.Note</td>
            <td>@item.OpenedYear</td>
            <td>@item.ClosedYear</td>
            <td>
                @if (MayEdit)
                {
                <a class="btn btn-primary btn-sm" href="ExternalStations/@item.Id/Edit"><span class="@FontAwesome.Edit" /> @Localizer["Edit"]</a>
                }
            <a class="btn btn-secondary btn-sm" href="ExternalStations/@item.Id/Customers"><span class="@FontAwesome.Customer" /> @Localizer["FreightCustomers"]</a>
        </td>
    </RowTemplate>
</TableTemplate>
}
@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int RegionId { get; set; }
    [Parameter] public int CountryId { get; set; }

    ClaimsPrincipal? Principal;
    IEnumerable<ExternalStation>? ExternalStations;
    IEnumerable<ListboxItem>? CountryItems;
    IEnumerable<ListboxItem>? RegionItems;
    Country? Country;
    Region? Region;

    protected override async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        CountryItems = await CountryService.ListboxItemsAsync(Principal);
        RegionItems = await RegionService.ListboxItemsAsync(Principal, 0);
        if (CountryItems.Count() == 1) OnSelectedCountry(CountryItems.First().Id);
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetCountryStations();
        await GetRegionStations();
    }

    async Task GetCountryStations()
    {
        if (CountryId > 0)
        {
            Country = await CountryService.FindById(CountryId);
            ExternalStations = await ExternalStationService.GetAllInCountry(Principal, CountryId);
        }
    }

    void OnSelectedCountry(int countryId)
    {
        Navigator.NavigateTo($"ExternalStations/Country/{countryId}");
    }

    async Task GetRegionStations()
    {
        if (RegionId > 0)
        {
            Region = await RegionService.FindById(Principal, RegionId);
            ExternalStations = await ExternalStationService.GetAllInRegion(Principal, RegionId);
        }
    }

    void OnSelectedRegion(int regionId)
    {
        Navigator.NavigateTo($"ExternalStations/Region{regionId}");
    }

    object? Owner => Country is not null ? Country : Region;

    bool MayEdit => ExternalStations is not null;

    bool HasData => ExternalStations is not null && ExternalStations.Count() > 0;
    bool CanSelectCountry => CountryItems is not null && CountryItems.Count() > 1;
}
