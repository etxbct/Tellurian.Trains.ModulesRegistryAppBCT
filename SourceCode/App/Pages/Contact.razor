@page "/Contact"
@inject IStringLocalizer<App> Localizer
@inject UserService UserService

<h1><span class="fa fa-mail-bulk" />@Localizer["Contact"]</h1>

@if (ContactPersons is null)
{
}
else
{
    <ContentView ContentName="Contact" />
    <TableTemplate Items="ContactPersons.OrderBy(cp => LanguageUtility.GetLocalizedString(cp.Person.Country.EnglishName, null))" HideNoRecordsToDisplay="true">
        <TableHeader>
            <th>@Localizer["Country"]</th>
            <th>@Localizer["Name"]</th>
            <th>@Localizer["IsGlobalAdministrator"]</th>
            <th>@Localizer["AreaOfResponsibility"]</th>
            <th>@Localizer["AdministersGroups"]</th>
        </TableHeader>
        <RowTemplate Context="contact">
            <th>@LanguageUtility.GetLocalizedString(contact.Person.Country.EnglishName, null)</th>
            <th>@contact.Person.Name()</th>
            <td>@contact.IsGlobalAdministrator.AsYesOrNo()</td>
            <td>@contact.AdministratorAreaOfResposibility</td>
            <td>@GroupMemberships(contact.Person)</td>
        </RowTemplate>
    </TableTemplate>
}


@code
{
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    ClaimsPrincipal? Principal;
    IEnumerable<User>? ContactPersons;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        ContactPersons = await UserService.GetCountryAdministratorsAsync();
    }

    string GroupMemberships(Person person) => string.Join(", ", person.GroupMembers.Where(gm => gm.IsGroupAdministrator).Select(gm => gm.Group.FullName));

}
