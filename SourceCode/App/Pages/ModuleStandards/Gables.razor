@page "/ModuleStandards/Gables"

@inject IStringLocalizer<App> Localizer
@inject ModuleGableTypeService ModuleGableTypeService

<PageHeading Label="ModuleGables" IconClass="@FontAwesome.Standard" PageAction="PageAction.List"  />

@if (Principal.IsAnyAdministrator())
{
    <a class="btn btn-sm btn-primary" href="ModuleStandards/Gables/0/Edit"><span class="@FontAwesome.Add" /> @Localizer["Add"]</a>
}



<TableTemplate Items="GableTypes?.OrderBy(gt => gt.Scale.Denominator).ThenBy(gt => gt.Designation)">
    <TableHeader>
        <th>@Localizer["Scale"]</th>
        <th>@Localizer["Designation"]</th>
        <th>@Localizer["Actions"]</th>
    </TableHeader>
    <RowTemplate Context="item">
        <td>@item.Scale.Display()</td>
        <td>@item.Designation</td>
        <td>
            @if (Principal.IsAnyAdministrator())
            {
                <a class="btn btn-sm btn-primary" href="ModuleStandards/Gables/@item.Id/Edit"><span class="@FontAwesome.Edit" /> @Localizer["Edit"]</a>
            }
        </td>
    </RowTemplate>
</TableTemplate>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    ClaimsPrincipal? Principal;
    IEnumerable<ModuleGableType>? GableTypes;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (Principal is not null)
        {
            GableTypes = (await ModuleGableTypeService.GetAllAsync()).OrderBy(i => i.Designation);
        }
    }

}