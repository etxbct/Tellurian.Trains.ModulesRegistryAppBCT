@page "/ModuleStandards/{id:int}/Edit"
@attribute [Authorize(Policy = "Admin")]

@inject IStringLocalizer<App> Localizer
@inject IToastService Toast
@inject IScaleService ScaleService
@inject IModuleStandardService ModuleStandardService

<h1><span class="fa fa-pencil-ruler" aria-hidden="true" /> @Localizer.AddOrEdit("ModuleStandard", Id == 0) </h1>

@if (ModuleStandard is null)
{

}
else
{
    <EditForm Model="ModuleStandard" OnValidSubmit="OnValidSubmit" Class="row g-3">
        <FluentValidationValidator />
        <ValidationSummary />
        <div class="col-md-2">
            <label class="form-label" for="ShortName">@Localizer["ShortName"]</label>
            <InputText Class="form-control" id="ShortName" @bind-Value="@ModuleStandard.ShortName" />
            <ValidationMessage For="@(() => ModuleStandard.ShortName)" />
        </div>
        <div class="col-md-2">
            <label class="form-label" for="scale">@Localizer["Scale"]</label>
            <InputSelect Class="form-select" id="scale" TValue="int" @bind-Value="@ModuleStandard.ScaleId">
                <option value="0">@SelectScaleLabel</option>
                @if (ScaleItems is not null)
                {
                    foreach (var item in ScaleItems)
                    {
                        if (item.Id == ModuleStandard.ScaleId)
                        {
                            <option selected value="@item.Id">@item.Description</option>
                        }
                        else
                        {
                            <option value="@item.Id">@item.Description</option>
                        }
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => ModuleStandard.ScaleId)" />
        </div>
        <div class="col-md-3">
            <label class="form-label" for="PreferredTheme">@Localizer["PreferredTheme"]</label>
            <InputText Class="form-control" id="PreferredTheme" @bind-Value="@ModuleStandard.PreferredTheme" />
            <ValidationMessage For="@(() => ModuleStandard.PreferredTheme)" />
        </div>
        <div class="col-md-5">
            &nbsp;
        </div>
        <div class="col-md-2">
            <label class="form-label" for="TrackSystem">@Localizer["TrackSystem"]</label>
            <InputText Class="form-control" id="TrackSystem" @bind-Value="@ModuleStandard.TrackSystem" />
            <ValidationMessage For="@(() => ModuleStandard.TrackSystem)" />
        </div>
        <div class="col-md-2">
            <label class="form-label" for="NormalGauge">@Localizer["NormalGauge"]</label>
            <InputNumber TValue="double?" Class="form-control" id="NormalGauge" @bind-Value="@ModuleStandard.NormalGauge" @bind-Value:format="F1" />
            <ValidationMessage For="@(() => ModuleStandard.NormalGauge)" />
        </div>
        <div class="col-md-2">
            <label class="form-label" for="NarrowGauge">@Localizer["NarrowGauge"]</label>
            <InputNumber TValue="double?" Class="form-control" id="NarrowGauge" @bind-Value="@ModuleStandard.NarrowGauge" @bind-Value:format="F1" />
            <ValidationMessage For="@(() => ModuleStandard.NarrowGauge)" />
        </div>
        <div class="col-md-4">
            <label class="form-label" for="Wheelset">@Localizer["Wheelset"]</label>
            <InputText Class="form-control" id="Wheelset" @bind-Value="@ModuleStandard.Wheelset" />
            <ValidationMessage For="@(() => ModuleStandard.Wheelset)" />
        </div>
        <div class="col-md-3">
            <label class="form-label" for="Couplings">@Localizer["Couplings"]</label>
            <InputText Class="form-control" id="Couplings" @bind-Value="@ModuleStandard.Couplings" />
            <ValidationMessage For="@(() => ModuleStandard.Couplings)" />
        </div>
        <div class="col-md-2">
            <label class="form-label" for="Electricity">@Localizer["ElectricSystem"]</label>
            <InputText Class="form-control" id="Electricity" @bind-Value="@ModuleStandard.Electricity" />
            <ValidationMessage For="@(() => ModuleStandard.Electricity)" />
        </div>
        <div class="form-group">
            <label class="form-label" for="AcceptedNorm">@Localizer["AcceptedNorm"]</label>
            <InputText Class="form-control" id="AcceptedNorm" @bind-Value="@ModuleStandard.AcceptedNorm" />
            <ValidationMessage For="@(() => ModuleStandard.AcceptedNorm)" />
        </div>
        <div class="col-12">
            <button type="submit" class="btn btn-primary"><span class="fa fa-save" />@Localizer["Save"]</button>
        </div>
    </EditForm>
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    ClaimsPrincipal? Principal;
    ModuleStandard? ModuleStandard;
    IEnumerable<ListboxItem>? ScaleItems;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (Principal is not null)
        {
            ScaleItems = await ScaleService.ListboxItemsAsync(Principal);
            ModuleStandard = Id > 0 ? await ModuleStandardService.FindByIdAsync(Principal, Id) : new ModuleStandard() { NormalGauge = 16.5 };
        }
    }

    private async Task OnValidSubmit()
    {
        if (ModuleStandard is not null)
        {
            var result = await ModuleStandardService.SaveAsync(Principal, ModuleStandard);
            ModuleStandard = result.Entity;
            Id = ModuleStandard?.Id ?? 0;
            Toast.ShowSuccessOrFailure(Localizer, result.Count > 0, result.Message);
        }
    }
    private string SelectScaleLabel => $"{Localizer["Select"]} {Localizer["Scale"].Value.ToLowerInvariant()}";


}
