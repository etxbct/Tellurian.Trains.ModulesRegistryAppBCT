@page "/ModuleStandards/EndProfiles/{id:int}/Edit"

@attribute [Authorize(Policy = "Admin")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject ModuleEndProfileService ModuleEndProfileService
@inject ScaleService ScaleService

<PageHeading ObjectName="EndProfile" IconClass="@FontAwesome.Standard" PageAction="@Id.ToAddOrEditPageAction()" />

<EditTemplate Item="EndProfile" OnValidSubmit="OnValidSubmit" ShowSaveButton="true">
    <Inputs>
        <AppInputSelect Width="2" Label="Scale" @bind-Value="EndProfile.ScaleId" Items="ScaleItems" />
        <AppInputText Width="8" Label="Designation" @bind-Value="EndProfile.Designation" />
    </Inputs>
</EditTemplate>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    ClaimsPrincipal? Principal;
    ModuleEndProfile EndProfile = Default;
    IEnumerable<ListboxItem>? ScaleItems;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (Principal is not null)
        {
            ScaleItems = await ScaleService.ListboxItemsAsync(Principal);
            EndProfile = Id > 0 ? await ModuleEndProfileService.FindByIdAsync(Principal, Id) ?? Default : Default;
        }
    }

    static ModuleEndProfile Default => new ModuleEndProfile { ScaleId = 3 };

    async Task OnValidSubmit()
    {
        if (EndProfile is not null)
        {
            var result = await ModuleEndProfileService.SaveAsync(Principal, EndProfile);
            if (result.Entity is not null) EndProfile = result.Entity;
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }
}
