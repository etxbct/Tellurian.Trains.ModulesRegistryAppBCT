@page "/layouts/{id:int}/modules"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer

@inject MeetingService MeetingService
@inject LayoutService LayoutService

<PageHeading Label="RegisteredModules" ObjectName="Layout" IconClass="@FontAwesome.Module" PageAction="PageAction.List" />
@if (MeetingParticipants is null)
{

}
else if (IsParticipant || Principal.IsAnyAdministrator())
{
    @foreach (var participant in MeetingParticipants.OrderBy(mp => mp.Person.FullName()))
    {
        <h3>@participant.Person.FullName(), @participant.Person.CityName</h3>
        @if (participant.LayoutModules.Count > 0)
        {
            <TableTemplate Items="@participant.LayoutModules.OrderBy(lm => lm.Module.FullName)" HideNoRecordsToDisplay="true">
                <TableHeader>
                    <th>@Localizer["Module"]</th>
                    <th width="120px">@Localizer["RegistrationTime"]</th>
                    <th width="100px" align="center">@Localizer["IsStation"]</th>
                    <th>@Localizer["Actions"] </th>
                </TableHeader>
                <RowTemplate Context="item">
                    <td>@item.Module.FullName</td>
                    <td width="120px">@item.RegisteredTime.ToString("d")</td>
                    <td width="100px" align="center">@item.HasLayoutStation().AsYesNo()</td>
                    <td>
                        @if (item.HasLayoutStation())
                        {
                            <AppButton Label="Waybills" Href="@WaybillsHref(item)" />
                        }
                     </td>
                </RowTemplate>
            </TableTemplate>
        }
        else
        {
            <p>@Localizer["NoModulesRegistered"]</p>
        }
    }
}
else
{
    <ActionMessage Label="NotAuthorised" AlertType="warning" />
}


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }

    ClaimsPrincipal? Principal;
    IEnumerable<MeetingParticipant>? MeetingParticipants;
    IEnumerable<LayoutStation>? LayoutStations;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        MeetingParticipants = await MeetingService.MeetingParticipantsAsync(Principal, Id);
        LayoutStations = await LayoutService.GetStationsAsync(Principal, Id);
    }

    bool IsParticipant => Principal is not null && MeetingParticipants is not null && MeetingParticipants.Any(mp => mp.PersonId == Principal.PersonId());

    string WaybillsHref(LayoutModule it) => $"reports/waybills/layout/{it.LayoutId}/station/{LayoutStation(it.LayoutStationId)?.StationId}";
    LayoutStation? LayoutStation(int? id) => id is null ? null : LayoutStations.SingleOrDefault(ls => ls.Id == id);

}
