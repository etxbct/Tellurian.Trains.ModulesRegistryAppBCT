@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject ModuleService ModuleService

@preservewhitespace true

@if (Modules is not null && MayEdit)
{
    <div>
        <a class="btn btn-sm btn-secondary" href="@ModuleEditHref(0)"><span class="@FontAwesome.Add" /> @Localizer["Add"]</a>
    </div>
}

<TableTemplate Items="Modules?.OrderBy(m => m.FullName).ThenBy(m => m.ConfigurationLabel)">
    <TableHeader>
        <th>@Localizer["Name"]</th>
        @if (AnyHasFremoName)
        {
            <th>@Localizer["FremoName"]</th>
        }
        <th>@Localizer["Standard"]</th>
        <th style="text-align: center">@Localizer["OwnedPercent"]</th>
        <th style="text-align: center">@Localizer["Status"]</th>
        <th>@Localizer["Documents"]</th>
        <th>@Localizer["Actions"]</th>
    </TableHeader>
    <RowTemplate Context="module">
        <td>@module.Name()</td>
        @if (AnyHasFremoName)
        {
            <td>@module.FremoName()</td>
        }
        <td>@module.Standard.ShortName</td>
        <td align="center">@ModuleOwnership(module).OwnedShareAndPercentage()</td>
        <td align="center">@module.StatusIcon()</td>
        <td>
            <DocumentLink DocumentId="module.PdfDocumentationId" FileExtension="pdf" />
            <DocumentLink DocumentId="module.DwgDrawingId" FileExtension="dwg" />
            <DocumentLink DocumentId="module.SkpDrawingId" FileExtension="skp" />
        </td>
        <td>
            @if (MayEdit)
            {
                <AppButton Label="Edit" Href="@ModuleEditHref(module.Id)" />
                <AppButton Label="Transfer" Href="@TransferOwnershipHref(module.Id)" />
                <AppButton Label="Delete" Href="@ModuleDeleteHref(module.Id)" />
                @if (module.Id > 0)
                {
                    <AppButton Label="Clone" OnClickCallback="(() => Clone(module.Id))" />
                }
            }
            @if (module.StationId.HasValue)
            {
                <AppButton Label="Station" Href="@StationEditHref(module.StationId.Value)" />
                <AppButton Label="FreightCustomers" Href="@StationCustomersHref(module.StationId.Value)" IconName="Customer" />
            }
        </td>
    </RowTemplate>
</TableTemplate>

@code {
    [Parameter] public IEnumerable<Module>? Modules { get; set; }
    [Parameter] public bool MayEdit { get; set; }
    [Parameter] public int OwningPersonId { get; set; }
    [Parameter] public int OwningGroupId { get; set; }
    [Parameter] public ClaimsPrincipal? Principal { get; set; }

    ModuleOwnershipRef OwnershipRef => ModuleOwnershipRef.PersonAndOrGroup(Principal, OwningPersonId, OwningGroupId);

    ModuleOwnership? ModuleOwnership(Module module) => module.ModuleOwnerships.SingleOrDefault(mo => mo.GroupId == OwnershipRef.GroupId || mo.PersonId == OwnershipRef.PersonId);

    protected override void OnParametersSet()
    {
        AnyHasFremoName = Modules.HasAnyFremoName();
    }

    async Task Clone(int id)
    {
        var result = await ModuleService.CloneAsync(Principal, id, OwnershipRef);
        ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        Modules = await ModuleService.GetAllAsync(Principal, OwnershipRef);
    }
    bool AnyHasFremoName;
    bool HasFremoNumber(Module module) => module.FremoNumber.HasValue;

    string ModuleEditHref(int id) => OwnershipRef.Href("Modules", id, "Edit");
    string ModuleDeleteHref(int id) => OwnershipRef.Href("Modules", id, "Delete");
    string StationEditHref(int id) => OwnershipRef.Href("Stations", id, "Edit");
    string StationCustomersHref(int id) => OwnershipRef.Href("Stations", id, "Customers");
    string TransferOwnershipHref(int id) => OwnershipRef.Href("Modules", id, "Transfer");
}
