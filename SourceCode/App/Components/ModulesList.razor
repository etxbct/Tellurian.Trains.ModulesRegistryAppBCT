@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject ModuleService ModuleService

@preservewhitespace true

@if (Modules is not null && MayEdit)
{
    <div>
        <a class="btn btn-sm btn-secondary" href="@ModuleEditHref(0)"><span class="@FontAwesome.Add" /> @Localizer["Add"]</a>
    </div>
}

<TableTemplate Items="Modules">
    <TableHeader>
        <th>@Localizer["Name"]</th>
        @if (AnyHasFremoName)
        {
            <th>@Localizer["FremoName"]</th>
        }
        <th>@Localizer["Standard"]</th>
        <th>@Localizer["OwnedPercent"]</th>
        <th>@Localizer["Status"]</th>
        <th>@Localizer["Documents"]</th>
        <th>@Localizer["Actions"]</th>
    </TableHeader>
    <RowTemplate Context="module">
        <td>@((MarkupString)Name(module))</td>
        @if (AnyHasFremoName)
        {
            <td>@module.FremoName()</td>
        }
        <td>@module.Standard.ShortName</td>
        <td>@OwnedPercentage(module)</td>
        <td>@Status(module)</td>
        <td>
            <DocumentLink DocumentId="module.PdfDocumentationId" FileExtension="pdf" />
            <DocumentLink DocumentId="module.DwgDrawingId" FileExtension="dwg" />
            <DocumentLink DocumentId="module.SkpDrawingId" FileExtension="skp" />
        </td>
        <td>
            @if (MayEdit)
            {
                <a class="btn btn-sm btn-primary" href="@ModuleEditHref(module.Id)"><span class="@FontAwesome.Edit" /> @Localizer["Edit"]</a>
                <a class="btn btn-sm btn-danger" href="@ModuleDeleteHref(module.Id)"><span class="@FontAwesome.Delete" /> @Localizer["Delete"]</a>
            }
            @if (module.StationId.HasValue)
            {
                <a class="btn btn-sm btn-secondary" href="@StationEditHref(module.StationId.Value)"><span class="@FontAwesome.Station" /> @Localizer["Station"]</a>
                <a class="btn btn-sm btn-secondary" href="@StationCustomersHref(module.StationId.Value)"><span class="@FontAwesome.Cargo" /> @Localizer["FreightCustomers"]</a>
            }
            @if (MayEdit && module.Id > 0)
            {
                <button type="button" class="btn btn-sm btn-secondary" @onclick="(() => Clone(module.Id))"><span class="@FontAwesome.Clone" /> @Localizer["Clone"]</button>
            }
        </td>
    </RowTemplate>
</TableTemplate>

@code {
    [Parameter] public IEnumerable<Module>? Modules { get; set; }
    [Parameter] public bool MayEdit { get; set; }
    [Parameter] public int OwningPersonId { get; set; }
    [Parameter] public int OwningGroupId { get; set; }
    [Parameter] public ClaimsPrincipal? Principal { get; set; }

    ModuleOwnershipRef OwnershipRef => ModuleOwnershipRef.PersonOrGroup(Principal, OwningPersonId, OwningGroupId);

    private string OwnedPercentage(Module module) => OwnedShare(module) == 0 ? "0%" : $"{100 / OwnedShare(module)}%";
    private int OwnedShare(Module module) => module?.ModuleOwnerships is null ?
        0 :
        module.ModuleOwnerships.Where(mo => mo.GroupId == OwnershipRef.GroupId || mo.PersonId == OwnershipRef.PersonId).Select(mo => mo.OwnedShare).FirstOrDefault();

    protected override void OnParametersSet()
    {
        AnyHasFremoName = Modules is not null && Modules.Any(m => m.FremoNumber.HasValue && m.ModuleOwnerships.Any(mo => mo.Person.FremoOwnerSignature.HasValue()));
    }

    async Task Clone(int id)
    {
        var result = await ModuleService.CloneAsync(Principal, id, OwnershipRef);
        ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        Modules = await ModuleService.GetAllAsync(Principal, OwnershipRef);
    }
    bool AnyHasFremoName;
    string Name(Module module) => module.ConfigurationLabel.HasValue() ? $"{module.FullName} <span class=\"fa fa-ruler\" /> {module.ConfigurationLabel}" : module.PackageLabel.HasValue() ? $"{module.FullName} <span class=\"fa fa-truck-loading\" /> {module.PackageLabel}" : module.FullName;
    MarkupString Status(Module module) => new( $"<span class=\"{(module.IsUnavailable ? "fa fa-times-circle" : "fa fa-check-circle")}\"/>");

    bool HasFremoNumber(Module module) => module.FremoNumber.HasValue;

    string ModuleEditHref(int id) => OwnershipRef.Href("Modules", id, "Edit");
    string ModuleDeleteHref(int id) => OwnershipRef.Href("Modules", id, "Delete");
    string StationEditHref(int id) => OwnershipRef.Href("Stations", id, "Edit");
    string StationCustomersHref(int id) => OwnershipRef.Href("Stations", id, "Customers");
}
