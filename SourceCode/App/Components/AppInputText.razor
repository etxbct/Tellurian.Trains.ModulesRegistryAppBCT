@using System.Diagnostics.CodeAnalysis;

@inherits AppInputBase<string>
@inject IStringLocalizer<App> Localizer

<div class="@BootstrapWrapperCss">
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label class="form-control-label" for="@Label">@Localizer[Label]</label>
    }
    <input disabled="@IsDisabled" type="@Type" class="form-control @CssClass" id="@Label" @bind="@CurrentValue" placeholder="@PlaceholderText" />
    @if (ValidationFor is not null)
    {
        <div class="form-control-validation">
            <ValidationMessage For="@ValidationFor" />
        </div>
    }
</div>

@code {
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public string? InputType { get; set; }

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out string result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value ?? string.Empty;
        validationErrorMessage = null;
        return true;
    }

    string BootstrapWrapperCss => Width.HasValue ? $"col-md-{Width}" : "col-md-4";
    string Type => string.IsNullOrWhiteSpace(InputType) ? "text" : InputType.ToLowerInvariant();
    string PlaceholderText => string.IsNullOrWhiteSpace(Placeholder) ? string.Empty : Localizer[Placeholder].Value;
    string Disabled => IsDisabled ? "disabled" : string.Empty;
}