@inject IStringLocalizer<App> Localizer
@if (Href.HasValue())
{
    <a class="@ButtonClass" style="@DisablePointerEvents" href="@Href"><span class="@IconClass" />&nbsp;@Localizer[LabelOrType]</a>
}
else if (IsSubmit)
{
    <button type="submit" class="@ButtonClass" disabled="@Disabled"><span class="@IconClass" />&nbsp;@Localizer[LabelOrType]&nbsp;@ObjectNameLocalized</button>
}
else
{
    <button class="@ButtonClass" disabled="@Disabled" @onclick="OnClickCallback.InvokeAsync"><span class="@IconClass" />&nbsp;@Localizer[LabelOrType]&nbsp;@ObjectNameLocalized</button>
}
@code {
    [Parameter] public string Label { get; set; } = "Button";
    [Parameter] public string? ObjectName { get; set; }
    [Parameter] public string? Href { get; set; }
    [Parameter] public EventCallback<int> OnClickCallback { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public string? Type { get; set; }
    [Parameter] public string IconName { get; set; } = string.Empty;
    [Parameter] public bool IsSubmit { get; set; }

    protected override void OnParametersSet()
    {
        if (string.IsNullOrWhiteSpace(IconName))
        {
            IconName = Label ?? "info";
        }
    }


    string ButtonClassType => Type.HasValue() ? Type.ToLowerInvariant() : Label?.ToLowerInvariant() switch
    {
        "add" => "primary",
        "edit" => "primary",
        "ok" => "primary",
        "register" => "primary",
        "upload" => "primary",
        "delete" => "danger",
        "save" => "primary",
        _ => "info"
    };

    string LabelOrType => Label ?? Type ?? "Button";
    string? DisablePointerEvents => IsDisabled ? "pointer-events: none" : null;
    string? Disabled => IsDisabled ? "disabled" : null;
    string ButtonClass => $"btn btn-sm btn-{ButtonClassType}";
    string IconClass => FontAwesome.ButtonIcons.ContainsKey(IconName) ? FontAwesome.ButtonIcons[IconName] : IconName.HasValue() ? $"fa fa-{IconName}" : "fa fa-info";
    string? ObjectNameLocalized => string.IsNullOrWhiteSpace(ObjectName) ? null : Localizer[ObjectName].ToString();
}
