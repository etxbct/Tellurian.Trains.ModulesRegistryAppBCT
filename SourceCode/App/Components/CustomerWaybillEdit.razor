@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject StationCustomerWaybillsService WaybillService


@if (Waybill is null)
{
    <p>No waybill</p>
}
else
{
    <EditTemplate Item="Waybill" OnValidSubmit="SaveAsync" TItem="StationCustomerWaybill">
        <Inputs>
            <AppInputSelect Width="2" Label="Days" @bind-Value="Waybill.OperatingDayId" Items="OperatingDayItems" ShowPleaseSelect=true />
            <AppInputNumber Width="2" Label="PrintCount" @bind-Value="Waybill.PrintCount" />
            <AppInputCheck Width="3" Label="PrintPerOperatingDay" @bind-Value="Waybill.PrintPerOperatingDay" />
            <AppInputCheck Width="2" Label="HasEmptyReturn" @bind-Value="Waybill.HasEmptyReturn" />
            @*<AppInputCheck Width="2" Label="IsExpressCargo" @bind-Value="Waybill.IsExpressCargo" />*@
            @*<AppInputCheck Width="2" Label="IsCoolingTransport" @bind-Value="Waybill.IsCoolingTransport" />*@
            @*<AppInputCheck Width="3" Label="HideLoadingTimes" @bind-Value="Waybill.HideLoadingTimes" />*@
            @*<AppInputCheck Width="3" Label="HideUnloadingTimes" @bind-Value="Waybill.HideUnloadingTimes" />*@
        </Inputs>
    </EditTemplate>

}


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public StationCustomerWaybill? Waybill { get; set; }
    [Parameter] public IEnumerable<ListboxItem>? MyCargoItems { get; set; }
    [Parameter] public IEnumerable<ListboxItem>? RegionItems { get; set; }
    [Parameter] public IEnumerable<ListboxItem>? OperatingDayItems { get; set; }
    [Parameter] public EventCallback<StationCustomerWaybill> OnSaveCallBack { get; set; }


    ClaimsPrincipal? Principal;

    protected override async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
    }

    async Task SaveAsync()
    {
        if (Waybill is null) return;
        await OnSaveCallBack.InvokeAsync(Waybill);
    }
}
