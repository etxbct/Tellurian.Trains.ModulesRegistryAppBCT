@inject IStringLocalizer<App> Localizer
@inject PropertyService PropertyService

@if (Module is null)
{

}
else
{
    <h3 class="mt-3">@Localizer["Gables"]</h3>
    <div class="col-12">
        <button type="button" class="btn btn-sm btn-secondary" @onclick="Add">@Localizer["Add"]</button>
    </div>
    @foreach (var gable in Module.ModuleGables)
    {
        <div class="row g-3" style="border-bottom: 1px solid gray; padding-bottom: 3px">
            <AppInputText Width="2" Label="Direction" @bind-Value="gable.Label" />
            <AppInputSelect Width="2" Label="GableType" @bind-Value="gable.TypePropertyId" Items="GableStandardItems" ShowPleaseSelect="true" />
            @if (gable.Id > 0)
            {
                <div class="col-md-2"><br /><button type="button" class="btn btn-sm btn-secondary" @onclick="(() => Delete(gable.Id))">@Localizer["Delete"]</button></div>
            }
        </div>
    }

}

@code {
    [Parameter] public Module? Module { get; set; }
    IEnumerable<ListboxItem>? GableStandardItems;

    protected override async Task OnParametersSetAsync()
    {
        GableStandardItems = await PropertyService.GetGableTypeListboxItemsAsync();
    }

    void Add()
    {
        if (Module is not null)
        {
            Module.ModuleGables.Add(new ModuleGable { Label = $"{Localizer["Gable"]}-{Module.ModuleGables.Count + 1}"});
            StateHasChanged();
        }
    }


    void Delete(int id)
    {
        if (Module is not null)
        {
            Module.ModuleGables = Module.ModuleGables.Where(mg => mg.Id != id).ToList();
            StateHasChanged();
        }
    }

    ListboxItem TypePropertyValue(int id) => GableStandardItems is null ? new ListboxItem(0, "") : GableStandardItems.Single(i => i.Id == id);
}
