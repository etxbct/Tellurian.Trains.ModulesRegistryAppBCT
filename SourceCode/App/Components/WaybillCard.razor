@inject IStringLocalizer<App> Localizer

@if (Item != null && Item.Origin is not null && Item.Destination is not null)
{
    <Pocket>
        <div class="waybill">
            <table width="100%">
                <tbody>
                    <tr>
                        <td colspan="3" class="box destination" style="color: @Item.Destination.ForeColor; background-color: @Item.Destination.BackColor">
                            <div class="waybill label">@DestinationLabel(Item, "Destination")</div>
                            <div class="waybill name" style="font-size: @TextSize(Item.Destination.StationName, Item.IsCrossBorder())pt">
                                @if (Item.IsCrossBorder())
                                {
                                    <span class="flag"><img src="@Item.FlagDestinationSrc()" /></span>
                                }
                                <span>@Item.Destination.StationName</span>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="3" class="waybill destination">
                            <div class="waybill label">@DestinationLabel(Item, "Consignee")</div>
                            <div class="waybill item">@Item.Destination.Name</div>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="3" class="waybill destination">
                            <div class="waybill label">@DestinationLabel(Item, "Cargo")</div>
                            <div class="waybill item">@CargoName(Item.Destination)</div>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="3" class="waybill destination">
                            <div class="waybill label">@DestinationLabel(Item, "CargoUnit", "Cargo unit")</div>
                            <div class="waybill item">@Item.Destination.QuantityUnitName</div>
                        </td>
                    </tr>
                    <tr>

                        <td colspan="3" class="waybill destination">
                            <div class="waybill label">@DestinationLabel(Item, "Instructions")</div>
                            <div class="waybill instruction">
                                <span>@DestinationInstruction(Item)</span>
                                @if (Item.Destination.TrackOrArea.HasValue())
                                {
                                    <span>&commat;</span>
                                    <span style="padding-left: 1px; padding-right: 1px; background-color: @DestinationTrackOrAreaColor(Item); color: @DestinationTrackOrAreaColor(Item).TextColor()"> @Item.Destination.TrackOrArea </span>
                                }
                            </div>
                        </td>
                    </tr>

                    <tr>
                        <td colspan="3" class="box origin" style="color: @Item.Origin.ForeColor; background-color: @Item.Origin.BackColor">
                            <div class="waybill label">@OriginLabel(Item, "Origin")</div>
                            <div class="waybill name" style="font-size: @TextSize(Item.Origin.StationName, Item.IsCrossBorder())pt">
                                @if (Item.IsCrossBorder())
                                {
                                    <span class="flag"><img src="@Item.FlagOriginSrc()" /></span>
                                }
                                <span>@Item.Origin.StationName</span>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="3">
                            <div class="waybill label">@OriginLabel(Item, "Shipper")</div>
                            <div class="waybill shipper">@Item.Origin.Name</div>
                        </td>
                    </tr>
                    @if (Item.IsCrossBorder() && CargoName(Item.Origin) != CargoName(Item.Destination))
                    {
                        <tr>
                            <td colspan="3" class="waybill">
                                <div class="waybill label">@OriginLabel(Item, "Cargo")</div>
                                <div class="waybill item">@CargoName(Item.Origin)</div>
                            </td>
                        </tr>
                    }
                    <tr>
                        <td>
                            <div class="waybill label">@OriginLabel(Item, "Carrier")</div>
                            <div class="waybill item">@Item.OperatorName</div>
                        </td>
                        <td>
                            <div class="waybill label">@OriginLabel(Item, "Days")</div>
                            <div class="waybill item">@Item.Origin.OperationDaysFlags.OperationDays(Item.Origin.Language.AsCultureInfo()).ShortName</div>

                        </td>
                        <td>
                            <div class="waybill label">@OriginLabel(Item, "Class")</div>
                            <div class="waybill item">@Item.WagonClass</div>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="3">
                            <div class="waybill label">@OriginLabel(Item, "Instructions")</div>
                            <div class="waybill instruction">
                                <span>@OriginInstruction(Item)</span>
                                @if (Item.Origin.TrackOrArea.HasValue())
                                {
                                   <span>&commat;</span>
                                   <span style="padding-left: 1px; padding-right: 1px; background-color: @Item.Origin.TrackOrAreaColor; color: @Item.Origin.TrackOrAreaColor.TextColor()">@Item.Origin.TrackOrArea </span>
                                }
                           </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </Pocket>
}

@code {
    [Parameter] public Waybill? Item { get; set; }
    [Parameter] public IEnumerable<LanguageLabels>? LanguageLabels { get; set; }

    string OriginLabel(Waybill item, string resourceKey, string? englishText = null) =>
        Label(item.Origin?.Language, resourceKey, englishText);

    string DestinationLabel(Waybill item, string resourceKey, string? englishText = null) =>
        Label(item.Destination?.Language, resourceKey, englishText);

    string DestinationTrackOrAreaColor(Waybill item) =>
        item.Destination is null || item.Destination.TrackOrAreaColor.HasNoValue() == true || item.Destination.TrackOrAreaColor.Equals("#ffffff", StringComparison.OrdinalIgnoreCase) ? "#fffff0" : item.Destination.TrackOrAreaColor;

    string Label(string? langaugeCode, string resourceKey, string? englishText)
    {
        if (englishText is null) englishText = resourceKey;
        var localText = Localizer[resourceKey].Value;
        if (LanguageLabels != null && langaugeCode != null)
        {
            localText = LanguageLabels.GetLabelText(resourceKey, langaugeCode);
            if (string.IsNullOrWhiteSpace(localText)) englishText = Localizer[resourceKey];
        }
        if (englishText == localText || string.IsNullOrWhiteSpace(localText)) return englishText!;
        return $"{englishText}/{localText}";
    }

    string DestinationInstruction(Waybill waybill) => UnloadingReady(waybill.Destination);
    string OriginInstruction(Waybill waybill) => LoadingReady(waybill.Origin);

    string CargoName(CargoCustomer? me) =>
        me is null ? string.Empty :
        me.PackageUnitName.HasValue() ? $"{me.CargoName} {In(me)} {me.PackageUnitName.ToLowerInvariant()}" :
        me.CargoName;

    string In(CargoCustomer me) => GetLabelText("In", me.Language);

    string LoadingReady(CargoCustomer? me) =>
        me is null ? string.Empty :
        string.IsNullOrWhiteSpace(me.ReadyTime) || me.ReadyTime == "n/a" ?
            me.TrackOrArea.HasNoValue() ? string.Empty : $"{GetLabelText("Load", me.Language)} " :
            $"{GetLabelText("LoadingReadyTime", me.Language)} {ReadyTime(me)} ";

    string UnloadingReady(CargoCustomer? me) =>
        me is null || string.IsNullOrWhiteSpace(me.ReadyTime) || me.ReadyTime == "n/a" ?
        me.TrackOrArea.HasNoValue() ? string.Empty : $"{GetLabelText("Unload", me.Language)} " :
        $"{GetLabelText("UnloadingReadyTime", me.Language)} {ReadyTime(me)} ";

    string ReadyTime(CargoCustomer me) => (me.ReadyTimeIsSpecifiedInLayout ? GetLabelText(me.ReadyTime, me.Language) : me.ReadyTime).ToLowerInvariant();

    string GetLabelText(string resourceKey, string language) =>
        LanguageLabels is null ? string.Empty : LanguageLabels.GetLabelText(resourceKey, language);


    int TextSize(string? text, bool hasFlag) =>
        string.IsNullOrWhiteSpace(text) ? 14 :
        hasFlag && text.Length < 12 ? 14 :
        text.Length < 15 ? 14 : 12;
}