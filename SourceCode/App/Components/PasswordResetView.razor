@inject IStringLocalizer<App> Localizer
@inject IMailSender MailSender
@inject IToastService ToastService
@inject NavigationManager Navigator

@inject ContentService ContentService
@inject UserService UserService


<h3><span class="fa fa-key" /> @Localizer["ResetPassword"]</h3>
<ContentView ContentName="PasswordReset" />
@if (HaveRead)
{
    <div class="row g-3">
        <div class="col-md-5">
            <label class="form-control-label" for="email">@Localizer["Email"]</label>
            <input class="form-control" id="email" type="text" @bind="@EmailAddress" />
        </div>
        <div class="col-12">
            <button type="submit" class="btn btn-primary btn-sm" @onclick="OnRequestNewPassword"><span class="fa fa-paper-plane" /> @Localizer["Send"]</button>
        </div>
    </div>
}
else
{
    <div class="col-12">
        <button type="button" class="btn btn-primary btn-sm" @onclick="IHaveRead"><span class="fa fa-user-check" /> @Localizer["IHaveReadAndUnderstand"]</button>
    </div>
}

@code {

    PasswordResetRequest? PasswordResetRequest;
    string? EmailAddress;

    bool HaveRead;

    void IHaveRead() => HaveRead = true;

    async Task OnRequestNewPassword()
    {
        var requestor = await UserService.ResetPasswordAsync(EmailAddress);
        if (requestor is null) return;
        if (requestor.IsPasswordResetPermitted())
        {
            var markdown = await ContentService.GetTextContent("PasswordResetMail", requestor.PreferredLanguage());
            PasswordResetRequest = new PasswordResetRequest(requestor, Localizer["PasswordResetHasBeenRequested"].ToString(), markdown, Navigator.BaseUri);
            if (PasswordResetRequest.IsValid)
            {
                var message = PasswordResetRequest.MailMessage;
                if (message is not null)
                {
                    var result = await MailSender.SendMailMessageAsync(message);
                    ToastService.ShowSuccessOrFailure(Localizer, result, "PasswordResetMailSent");
                    return;
                }
            }
        }
    }
}
