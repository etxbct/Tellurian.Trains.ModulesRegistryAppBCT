@typeparam TItem

@inject IStringLocalizer<App> Localizer

@if (Items is null)
{
    <ActionMessage Label="GettingData" IconName="hourglass" />
}
else if (Items.Count() == 0 && !HideNoRecordsToDisplay)
{
    <ActionMessage Label="NoRecordsToDisplay" />
}
else
{
    <table class="table table-sm">
        <thead>
            <tr>
                @TableHeader
                @if (RowEditTemplate is not null)
                {
                    <th>@Localizer["Actions"]</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (RowTemplate is not null)
            {
                @foreach (var item in Items)
                {
                    @if (RowEditTemplate is not null && IsEditItem(item))
                    {
                        <tr @key="@ItemKey(item)">
                            @RowEditTemplate(item)
                            <td>
                                <button class="btn btn-sm btn-primary"><span class="@FontAwesome.Save" /> @Localizer["Save"]</button>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr @key="@ItemKey(item)" style="@ItemStyle(item)">
                            @RowTemplate(item)
                            @if (RowEditTemplate is not null)
                                {
                                    <td>
                                        <button class="btn btn-sm btn-primary"><span class="@FontAwesome.Edit" /> @Localizer["Edit"]</button>
                                    </td>
                                }
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public RenderFragment? TableHeader { get; set; }
    [Parameter] public RenderFragment<TItem>? RowTemplate { get; set; }
    [Parameter] public RenderFragment<TItem>? RowEditTemplate { get; set; }
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public bool HideNoRecordsToDisplay { get; set; }
    [Parameter] public Func<TItem, string>? Key { get; set; }
    [Parameter] public Func<TItem, string>? RowStyle { get; set; }

    string ItemKey(TItem item) => Key is null ? item.GetHashCode().ToString() : Key(item);
    string ItemStyle(TItem item) => RowStyle is null ? string.Empty : RowStyle(item);


    string? EditedKey = null;
    bool IsEditItem(TItem item) => EditedKey is not null && ItemKey(item) == EditedKey;
}