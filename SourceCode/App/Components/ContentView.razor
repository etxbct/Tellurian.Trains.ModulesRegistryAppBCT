@inject ContentService ContentService
@inject IStringLocalizer<App> Localizer

@if (IsVisible)
{
    @if (Content is null)
    {
        <ActionMessage Label="GettingContent" IconName="hourglass" />
    }
    else if (IsEmpty)
    {
        <ActionMessage Label="NoInformation" />
    }
    else
    {
        if (ShowModificationTime)
        {
            <div class="alert alert-info"><span class="fa fa-pen-square" /> @string.Format(Localizer["ThisContentWasModified"].Value, Content.LastModified)</div>
        }
        @((MarkupString)Content.AsHtml)
    }
}
@code {
    [Parameter] public string? ContentName { get; set; }
    [Parameter] public string? Language { get; set; } = null;
    [Parameter] public string? Href { get; set; } = null;
    [Parameter] public bool ShowModificationTime { get; set; }
    [Parameter] public bool IsHidden { get; set; }

    TextContent? Content;

    protected async override Task OnParametersSetAsync()
    {
        if (Href is not null)
        {
            Content = await ContentService.GetRemoteTextContent(Href);
        }
        else if (ContentName is not null)
        {
            Content = await ContentService.GetTextContent(ContentName, Language);
        }
        else
        {
            Content = TextContent.Empty;
        }
    }

    bool IsVisible => !IsHidden;
    bool IsEmpty => (string.IsNullOrWhiteSpace(ContentName) && string.IsNullOrWhiteSpace(Href)) || string.IsNullOrWhiteSpace(Content?.Text);
}
